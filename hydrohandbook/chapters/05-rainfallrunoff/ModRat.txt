###### INPUT BLOCK ############################################
PT = 6.96 # Total storm depth in inches         #####INPUT VALUE
area= 181 # Drainage area in acres           #####INPUT VALUE
C = 0.65 # Runoff coefficient                  #####INPUT VALUE
Tc = 66.0 # Time of concentration in minutes   #####INPUT VALUE
hyetType = 'type2'                              #####INPUT VALUE
# Design storm options are: 'type1','type1A','type2','type3','user'
# need to manually insert user hyetograph in the Hydrograph Engine section
###############################################################
# Convolution Engine
#############################################
def Convolve(duration, excitation, kernel):
    response = [0 for i in range(duration)] # populate response vector with zeros
  # response = direct runoff hydrograph (unscaled)
  # excitation = input rate in length per time
  # kernel = unit response
    for i in range(duration):
        for j in range(i,duration-1):
            response[j]=excitation[i]*kernel[(j-i)+1]+response[j]
    return(response)

#############################################
# Kernel Engine
#############################################
def kernel(time,area,tc):
# area = drainage area (in acres)
# tc = time of concentration (in minutes)
    if time > tc:
        kernel=0.0
    else:
        kernel=area/tc
    return(kernel)

##############################################
# Modified Rational Convolution 
#############################################
def ModRat(area,runoff_coefficient,precipitation,time,Tc):
    excess=[0 for i in range(len(precipitation))]
    flow=[0 for i in range(len(precipitation))]
# Generate Excess Rainfall
    for i in range(len(precipitation)):
        excess[i]=runoff_coefficient*precipitation[i]
# Generate Unitgraph for Rational Method
#  unitgraph<-(sapply(time,kernel,area,Tc))/sum(sapply(time,kernel,area,Tc));
    unitgraph=[0 for i in range(len(precipitation))] # start with zeroes
    accumulator=0.0
    for i in range(len(precipitation)):
        unitgraph[i] = kernel(time[i],area,Tc)
        accumulator=accumulator+unitgraph[i]
# now rescale each by the accumulator
    for i in range(len(precipitation)):
        unitgraph[i] = unitgraph[i]/accumulator
# Apply discrete convolution     
    flow=Convolve(len(excess),excess,unitgraph)
    flow = [area*(i) for i in flow]
    return(flow)

###############################################
# Hyetograph Engine
###############################################
# SCS Type Curves
hour = [0,2,4,6,7,8,8.5,9,9.5,9.75,10,10.5,11,11.5,11.75,12,12.5,13.0,13.6,14,16,20,24,48]
minutes = [i*60 for i in hour]
type1 = [0,0.035,0.076,0.125,0.156,0.194,0.219,0.254,0.303,0.362,0.515,0.583,0.624,0.654,0.669,0.682,0.706,0.727,0.748,0.767,0.83,0.926,1,1]
type1A = [0,0.05,0.116,0.206,0.268,0.425,0.48,0.52,0.55,0.564,0.577,0.601,0.624,0.645,0.655,0.664,0.683,0.701,0.719,0.736,0.8,0.906,1,1]
type2 = [0,0.022,0.048,0.08,0.098,0.12,0.133,0.147,0.163,0.172,0.181,0.204,0.235,0.283,0.357,0.663,0.735,0.772,0.799,0.82,0.88,0.952,1,1]
type3 = [0,0.02,0.043,0.072,0.089,0.115,0.13,0.148,0.167,0.178,0.189,0.216,0.25,0.298,0.339,0.5,0.702,0.751,0.785,0.811,0.886,0.957,1,1]
usertime =  [0,7,     8,     9,9.3333, 10, 24, 48]
userdepth = [0,0,0.4285,0.8571,   1.0,1.0,1.0,1.0]

from scipy.interpolate import interp1d
if hyetType == 'type1':
    f = interp1d(minutes, type1, kind='linear')  #Design storm options are: 'type1','type1A','type2','type3' 
elif hyetType == 'type1A':
    f = interp1d(minutes, type1A, kind='linear')  #Design storm options are: 'type1','type1A','type2','type3' 
elif hyetType == 'type2':
    f = interp1d(minutes, type2, kind='linear')  #Design storm options are: 'type1','type1A','type2','type3' 
elif hyetType == 'type3':
    f = interp1d(minutes, type3, kind='linear')  #Design storm options are: 'type1','type1A','type2','type3' 
elif hyetType == 'user':
    minutes = [i*60 for i in usertime]
    f = interp1d(minutes, userdepth, kind='linear')  #Design storm options are: 'type1','type1A','type2','type3' 
#
t24 = [float(i) for i in range(2881)] # time in minutes
d24 = f(t24) # cumulative proportional depths - difference to get rates
d24 =[PT*i for i in d24] # scale to total depth
r24 = [0 for i in range(len(d24))] # create destination
r24[0] = d24[0]
for i in range(1, len(d24)):
    r24[i] = d24[i] - d24[i-1] # this will be inches/minute
    r24[i]=r24[i]*60 # inches per hour

#############################################
# Build direct runoff hydrograph
#############################################
result = ModRat(area,C,r24,t24,Tc) 
## Compute summary values
peakQ = max(result)
## Mass balances
totalQ = sum(result)*60/43560 # area under red curve == volume of discharge
totalR = C*d24[-1]*(1/12)*area
#adjust = totalR/totalQ
#totalQ=totalQ*adjust
massE = (totalR-totalQ)/totalR

#############################################
# Graphics engine
#############################################
import matplotlib.pyplot as plt

# Compose plot title using modern f-strings
hyetograph_labels = {
    'type1': 'SCS Type 1 Design Storm',
    'type1A': 'SCS Type 1A Design Storm',
    'type2': 'SCS Type 2 Design Storm',
    'type3': 'SCS Type 3 Design Storm',
    'user': 'User Supplied Design Storm'
}

plottitle = (
    "Direct Runoff Hydrograph by Modified Rational Method (Discrete Convolution)\n\n"
    f"Hyetograph Type: {hyetograph_labels.get(hyetType, 'Unknown')}\n"
    f"Hydrograph Type: Modified Rational\n"
    f"Contributing Drainage Area: {area:.1f} acres\n"
    f"Rainfall Storm Depth: {PT:.2f} inches\n"
    f"Runoff Coefficient: {C:.2f}\n"
    f"Time of Concentration: {Tc:.1f} minutes\n"
    f"Peak Discharge: {peakQ:.1f} cfs\n"
    f"Total Discharge (area under red curve): {totalQ:.2f} acre-feet\n"
    f"Total Excess Rain (area under blue curve): {totalR:.2f} acre-feet\n"
    f"Mass Balance Relative Error: {massE*100:.2f}%"
)

# Plotting
fig, ax1 = plt.subplots(figsize=(10, 6))
ax1.step(t24, r24, color='blue', label='Rainfall Intensity (in/hr)')
ax1.set_xlabel('Time (minutes)')
ax1.set_ylabel('Rainfall Intensity (in/hr)', color='blue')
ax1.tick_params(axis='y', labelcolor='blue')

# Twin axis for discharge
ax2 = ax1.twinx()
ax2.step(t24, result, color='red', label='Runoff Discharge (cfs)')
ax2.set_ylabel('Runoff Discharge (cfs)', color='red')
ax2.tick_params(axis='y', labelcolor='red')

# Add grid, legends, and title
ax1.grid(True, which='major', axis='y')
fig.suptitle(plottitle, fontsize=10, ha='left', x=0.01, wrap=True)
fig.tight_layout(rect=[0, 0, 1, 0.94])

# Show the plot
plt.show()