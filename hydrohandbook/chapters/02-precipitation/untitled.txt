🧪 Activity 1: Tipping Bucket Rain Gauge – Python Exercise
📘 Objective
Convert raw tipping bucket event data into a hyetograph (rainfall intensity vs. time), using Python and pandas.

📂 Input
A CSV file with timestamped tipping events. Each row indicates the time at which the bucket tipped, representing a known volume (e.g., 0.01 in or 0.2 mm).

csv
Copy
Edit
timestamp
2023-04-01 14:00:12
2023-04-01 14:01:33
2023-04-01 14:02:11
...
✅ Student Task
python
Copy
Edit
import pandas as pd
import matplotlib.pyplot as plt

# Load data
df = pd.read_csv("tipping_events.csv", parse_dates=["timestamp"])
df.sort_values("timestamp", inplace=True)

# Compute time difference between tips (in minutes)
df['delta_min'] = df['timestamp'].diff().dt.total_seconds() / 60

# Known volume per tip (e.g., 0.2 mm)
tip_volume_mm = 0.2

# Rainfall intensity in mm/hr = (volume / delta_min) * 60
df['intensity_mm_per_hr'] = tip_volume_mm / df['delta_min'] * 60

# Plotting hyetograph
plt.figure(figsize=(10, 4))
plt.bar(df['timestamp'], df['intensity_mm_per_hr'], width=0.01)
plt.ylabel("Rainfall Intensity (mm/hr)")
plt.xlabel("Time")
plt.title("Hyetograph from Tipping Bucket Data")
plt.grid(True)
plt.tight_layout()
plt.show()
💡 Discussion Prompts
What does a narrow vs. wide spacing of tipping events indicate?

What errors may arise in periods of high rainfall intensity?

How could you group this into 5-minute bins for a smoother hyetograph?

📌 Optional extension: Have students modify the script to aggregate tips into regular time bins (e.g., 5 or 15 minutes) using resample().

📊 Activity 2: Tipping Bucket Hyetograph in Excel
📘 Objective
Use Excel to manually create a hyetograph from tipping event data.

🗂 Sample Input Data
Tip #	Timestamp	Time (decimal hr)	ΔTime (hr)	Intensity (mm/hr)
1	2023-04-01 14:00:12	14.003	–	–
2	2023-04-01 14:01:33	14.025	0.022	0.2 / 0.022
3	2023-04-01 14:02:11	14.037	0.012	0.2 / 0.012
...	...	...	...	...

📌 Instructor tip: Provide a worksheet template with columns pre-labeled and equations partially filled.

✅ Student Task
Convert timestamps to decimal hours.

Compute the time difference between tips.

Calculate rainfall intensity using:
Rainfall Intensity = Tip Volume (mm) ÷ ΔTime (hr)

Create a column chart (bar graph) with time on the x-axis and intensity on the y-axis.

💬 Discussion Prompts
How would you bin tips into regular intervals for smoother curves?

What limitations do you observe when event spacing becomes very short?

Compare your Excel hyetograph with one generated by Python or radar data.


Certainly, Sensei. Since your example uses cumulative depth measurements at specific hours, we can simulate a tipping bucket–style cumulative rainfall series, and then compute incremental rainfall and resample that to 15-minute intervals (i.e., 15T).

Below is the full script using your sample input. It converts time in hours to timestamps, calculates incremental depths, resamples to 15-minute intervals, and computes intensity in mm/hr.

🐍 Python Script to Resample Cumulative Depth to 15-Minute Rainfall Intensity
python
Copy
Edit
import pandas as pd
import matplotlib.pyplot as plt
from io import StringIO
import datetime

# Sample input (cumulative rainfall)
sample_data = """# Time Depth
0.0 0.00
3.9 1.20
7.0 2.40
10.0 3.00
11.0 3.00
"""

# Read into DataFrame
df = pd.read_csv(StringIO(sample_data), comment="#", sep=r"\s+", names=["time_hr", "depth_mm"])

# Convert hours to datetime starting from arbitrary origin (e.g., Jan 1, 2023)
origin = pd.Timestamp("2023-01-01 00:00:00")
df["timestamp"] = origin + pd.to_timedelta(df["time_hr"], unit="h")
df.set_index("timestamp", inplace=True)

# Compute incremental depth
df["incremental_mm"] = df["depth_mm"].diff().fillna(0)

# Create regular 15-minute interval time index
df_resampled = df["incremental_mm"].resample("15T").sum()

# Convert to intensity in mm/hr
df_resampled = df_resampled * 4  # 15 minutes → 4 intervals/hour

# Plot hyetograph
plt.figure(figsize=(10, 4))
df_resampled.plot(kind="bar", width=1, color="skyblue")
plt.ylabel("Rainfall Intensity (mm/hr)")
plt.xlabel("Time")
plt.title("15-Minute Interval Hyetograph")
plt.grid(True)
plt.tight_layout()
plt.show()
🧠 Notes
resample("15T") bins data into 15-minute intervals.

The * 4 converts depth (mm/15 min) to intensity (mm/hr).

If you later switch to a tipping bucket time series (with one line per tip), you could use .resample("15T").count() multiplied by volume per tip.

Let me know if you’d like an Excel version of this same resampling logic or a version that returns both intensity and cumulative rainfall on the same plot.







You said:
This is cool, thanks! Yes Excel logic would be great too - i Can make it a homework assignment.


ChatGPT said:
You're very welcome, Sensei! Here's an Excel-friendly version of the same resampling and intensity computation, designed for a student homework assignment based on cumulative rainfall data.

📊 Excel Homework – 15-Minute Rainfall Intensity from Cumulative Depth
🎯 Objective:
Students will convert irregular cumulative rainfall measurements into 15-minute rainfall intensities, suitable for a hyetograph.

📥 Input Data (Student Worksheet)
A	B
Time (hr)	Depth (mm)
0.0	0.00
3.9	1.20
7.0	2.40
10.0	3.00
11.0	3.00

🔧 Step-by-Step Instructions:
🔹 1. Convert Time to Excel Time Format
In Column C:

=A2/24
Copy this down. This converts time in hours to Excel time (which is based on days).

Label: Time (Excel DateTime)

🔹 2. Compute Incremental Rainfall Depths
In Column D:

=IF(ROW()=2, 0, B2 - B1)
This computes the difference in depth between successive measurements.

Label: Incremental Depth (mm)

🔹 3. Create a Time Series with 15-Minute Intervals
In a separate column (say Column F), generate a series from 0:00 to 11:00 in 15-minute steps:

In F2: =TIME(0,0,0)
In F3: =F2 + TIME(0,15,0)
Fill down until you pass 11:00

Label: 15-min Timestamp

🔹 4. Use Interpolation or Lookup for Cumulative Depth
In Column G, use linear interpolation (or optionally use FORECAST.LINEAR() or INDEX/MATCH):

=FORECAST.LINEAR(F2, $C$2:$C$6, $B$2:$B$6)

This estimates the cumulative depth at each 15-minute time point.

Label: Interpolated Depth (mm)

🔹 5. Compute 15-Minute Incremental Depth
In Column H:

=IF(ROW()=2, 0, G2 - G1)

Label: Incremental 15-min Depth (mm)

🔹 6. Compute Rainfall Intensity
=H2 * 4

Multiply by 4 to convert mm per 15 min → mm/hr.

Label: Rainfall Intensity (mm/hr)

📈 Plotting Task
Have students use a column chart to plot Time vs. Rainfall Intensity.

X-axis: Column F (15-min timestamps)

Y-axis: Column I (Rainfall Intensity)

📝 Instructor Notes
You can optionally provide interpolation hints or prefill the FORECAST.LINEAR() function.

Advanced students can do spline interpolation or compare this to a tipping bucket plot.

Would you like a ready-to-print .xlsx template or the assignment text in Markdown format for distribution?

Absolutely, Sensei! Here's a modified version of the previous Python script that outputs a CSV file with both the converted timestamps and the corresponding cumulative depth. This can serve as a clean, auto-generated dataset for student assignments in either Excel or Python.

🐍 Modified Python Script to Export Timestamped Depths
python
Copy
Edit
import pandas as pd
from io import StringIO

# Sample cumulative rainfall input (time in hours, depth in mm)
sample_data = """# Time Depth
0.0 0.00
3.9 1.20
7.0 2.40
10.0 3.00
11.0 3.00
"""

# Read into DataFrame
df = pd.read_csv(StringIO(sample_data), comment="#", sep=r"\s+", names=["time_hr", "depth_mm"])

# Convert time (hours) to datetime starting from a defined origin
origin = pd.Timestamp("2023-01-01 00:00:00")
df["timestamp"] = origin + pd.to_timedelta(df["time_hr"], unit="h")

# Reorder columns for clarity
df = df[["timestamp", "time_hr", "depth_mm"]]

# Save to external CSV file
output_filename = "generated_rainfall_data.csv"
df.to_csv(output_filename, index=False)

print(f"✅ File saved: {output_filename}")
📄 Output CSV Format
timestamp	time_hr	depth_mm
2023-01-01 00:00:00	0.0	0.00
2023-01-01 03:54:00	3.9	1.20
2023-01-01 07:00:00	7.0	2.40
2023-01-01 10:00:00	10.0	3.00
2023-01-01 11:00:00	11.0	3.00

🧠 Suggested Use
You can:

Swap in different time/depth combinations to auto-generate varied homework sets.

Import the file into Excel for the assignment you outlined earlier.

Use multiple files to teach rainfall interpolation and storm event reconstruction.

Would you like a version that adds small random noise to the time values or depths to make more realistic student problems?
