{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# DTRM Survival Model\n",
    "\n",
    "# Parcel speeds using a Manning's type model\n",
    "#   V = (1.5/N)*R**(2/3)*S**(1/2)\n",
    "\n",
    "\n",
    "#       INCREASES DOWNWARD, X INCREASES RIGHTWARD\n",
    "#\n",
    "#     XP(),YP()    ARE X AND Y COORDINATES OF PARTICLES\n",
    "#     XG(),YG()    ARE X AND Y COORDINATES OF GRID\n",
    "#  HEAD()       IS HEAD DISTRIBUTION DEFINED ON THE GRID\n",
    "#  VX()         IS COMPUTED VELOCITY IN DIRECTION OF FLOW\n",
    "#  VY()         IS COMPUTED TIME OF TRAVEL TO NEXT CELL IN DIRECTION OF FLOW\n",
    "#  DMAP()       IS FLOW DIRECTION ARRAY IN 8-DIRECTIONS; \n",
    "#                 DIRECTION 0 IS OUTLET\n",
    "#                 DIRECTION 9 IS A PIT\n",
    "#                 DIRECTION -1 IS NO-FLOW CELL\n",
    "#                 ENTIRE MODEL IS SURROUNDED BY DIRECTION 0 CELLS, THESE ARE IGNORED\n",
    "#\n",
    "#                \n",
    "#  DELATX       IS GRID SPACING\n",
    "#  DELTAT       IS TIME INCREMENT\n",
    "#  NP           ARE NUMBER OF PARTICLES\n",
    "#\n",
    "#  Y - COORDINATE OF GRID IS ASSOCIATED WITH THE \"ROW\" INDEX\n",
    "#  X - COORDINATE OF GRID IS ASSOCIATED WITH THE \"COLUMN\" INDEX\n",
    "#\n",
    "#  Y - INCREASES DOWNWARD\n",
    "#  X - INCREASES RIGHTWARD\n",
    "#\n",
    "#  THE UPPER LEFT HAND CORNER OF THE HEAD ARRAY IS X=0,Y=0\n",
    "#  THE LOWER RIGHT HAND CORNER OF THE HEAD ARRAY IS X=XMAX,Y=YMAX\n",
    "#\n",
    "# DECLARE ARRAYS\n",
    "\n",
    "\n",
    "###########################################################\n",
    "#### import memory management tools (garbage collector) ###\n",
    "###########################################################\n",
    "import gc\n",
    "gc.collect();\n",
    "###########################################################\n",
    "#### import plotting support packages                  ####\n",
    "###########################################################\n",
    "import matplotlib.pyplot as plt\n",
    "###########################################################\n",
    "#### import random number generator for particle death ####\n",
    "###########################################################\n",
    "import random \n",
    "\n",
    "def mappart(plotfileout,title,xpos,ypos,xsink,ysink):\n",
    "    import matplotlib.pyplot as plt\n",
    "# build a plot of particle positions and outlet position\n",
    "    plt.figure()\n",
    "    plt.title(title)\n",
    "    plt.scatter(xpos, ypos, s=1, color='blue')\n",
    "    plt.scatter(xsink, ysink, s=100, color='magenta')\n",
    "    plt.savefig(plotfileout);\n",
    "    return\n",
    "\n",
    "####################################\n",
    "#### Specify the input file name ###\n",
    "####################################\n",
    "filename = \"sta08055700.mat.dat\" # dtrm input file\n",
    "\n",
    "#################################\n",
    "#### Read the DTRM input file ###\n",
    "#################################\n",
    "afile = open(filename,\"r\")  # connect to the file\n",
    "amatrix = [] # null object to store read\n",
    "bmatrix = []\n",
    "rowNumA = 0\n",
    "rowNumB = 0\n",
    "aflag = 1\n",
    "bflag = 1\n",
    "verbose = 1\n",
    "substrings_to_check = [\"DIRECTIVE\",\"VERBOSE\",\"TERSE\",\"DMAP\",\"SMAP\",\"TMAP\"]\n",
    "for line in afile:\n",
    "# if line contains substrings then first line\n",
    "    if any(substring in line for substring in substrings_to_check):\n",
    "#    if \"DIRECTIVE\" in line:      \n",
    "        directive = line.strip().split()[0]\n",
    "#        print('Row : ',rowNumA,'Contents : ',line)\n",
    "        rowNumA += 1\n",
    "        continue\n",
    "    if rowNumA == 1:  # this is second line\n",
    "        nrow = line.strip().split()[0]\n",
    "        ncol = line.strip().split()[1]\n",
    "#        print(nrow,ncol)\n",
    "#        print('Row : ',rowNumA,'Contents : ',line.strip().split())\n",
    "        aflag = 0 # read into amatrix\n",
    "        rowNumA += 1\n",
    "        continue\n",
    "####################################\n",
    "#### Check for seperator fields ####\n",
    "#### Read input matrices to EOL ####\n",
    "####################################\n",
    "    if \"CMAN,FDEEP,NMAN\" in line: # seperates \n",
    "        cman  = line.strip().split()[0]\n",
    "        fdeep = line.strip().split()[1]\n",
    "        nman  = line.strip().split()[2]\n",
    "        alife = line.strip().split()[3]\n",
    "#        print('Row : ',rowNumA,'Contents : ',line)\n",
    "#        rowNumA += 1\n",
    "        aflag = 1\n",
    "        bflag = 1\n",
    "        continue\n",
    "    if \"DX,DT,TMAX,D1\" in line: # seperates \n",
    "        dx   = line.strip().split()[0]\n",
    "        dt   = line.strip().split()[1]\n",
    "        tmax = line.strip().split()[2]\n",
    "        d1   = line.strip().split()[3]\n",
    "        dyt  = line.strip().split()[4]\n",
    "        dxt  = line.strip().split()[5]\n",
    "#        print('Row : ',rowNumA,'Contents : ',line)\n",
    "#        rowNumA += 1\n",
    "        aflag = 1\n",
    "        bflag = 1\n",
    "        continue\n",
    "    if \"NP,PRINT_N\" in line: # seperates \n",
    "        np   = line.strip().split()[0]\n",
    "        npt   = line.strip().split()[1]\n",
    "#        print('Row : ',rowNumA,'Contents : ',line)\n",
    "        aflag = 1\n",
    "        bflag = 0 # read into bmatrix \n",
    "        continue\n",
    "    if \"outlet loc\" in line: # seperates \n",
    "        nrout   = line.strip().split()[0]\n",
    "        ncout   = line.strip().split()[1]\n",
    "        elevout = line.strip().split()[2]\n",
    "#########################################\n",
    "#### reindex to start from 0 index   ####\n",
    "#########################################\n",
    "        nrout = int(nrout) - 1\n",
    "        ncout = int(ncout) - 1\n",
    "#        print('Row : ',rowNumA,'Contents : ',line)\n",
    "        aflag = 1\n",
    "        bflag = 1\n",
    "    elif aflag == 0:\n",
    "        amatrix.append([float(n) for n in line.strip().split()])\n",
    "#        print('Row : ',rowNumA,'Contents : ',line.strip().split())\n",
    "        rowNumA += 1\n",
    "    elif bflag == 0:\n",
    "        bmatrix.append([float(n) for n in line.strip().split()])\n",
    "#        print('Row : ',rowNumB,'Contents : ',line.strip().split())\n",
    "        rowNumB += 1\n",
    "#    print(\"loop bottom\")\n",
    "afile.close() # Disconnect the file\n",
    "#################################\n",
    "#### Echo to DTRM output file ###\n",
    "#################################\n",
    "fileout = filename.replace(\"mat\",\"out\")\n",
    "afile = open(fileout,\"w\")  # connect to the file\n",
    "afile.write(\"DTRM-Survival Jupyter/iPython\")\n",
    "afile.write(\"\\n  INPUT FILENAME : \" + repr(filename))\n",
    "afile.write(\"\\n OUTPUT FILENAME : \" + repr(fileout))\n",
    "afile.write(\"\\n  OUTPUT DENSITY : \" + directive)\n",
    "afile.write(\"\\n            ROWS : \" + repr(int(nrow)))\n",
    "afile.write(\"\\n         COLUMNS : \" + repr(int(ncol)))\n",
    "afile.write(\"\\n            CMAN : \" + repr(float(cman)))\n",
    "afile.write(\"\\n           FDEEP : \" + repr(float(fdeep)))\n",
    "afile.write(\"\\n            NMAN : \" + repr(float(nman)))\n",
    "afile.write(\"\\n           ALIFE : \" + repr(float(alife)))\n",
    "afile.write(\"\\n              DX : \" + repr(float(dx)))\n",
    "afile.write(\"\\n              DT : \" + repr(float(dt)))\n",
    "afile.write(\"\\n            TMAX : \" + repr(float(tmax)))\n",
    "afile.write(\"\\n              D1 : \" + repr(float(d1)))\n",
    "afile.write(\"\\n             DYT : \" + repr(float(dyt)))\n",
    "afile.write(\"\\n             DXT : \" + repr(float(dxt)))\n",
    "afile.write(\"\\n NUMBER PARTICLES: \" + repr(int(np)))\n",
    "afile.write(\"\\n PRINT FREQUENCY : \" + repr(int(npt)))\n",
    "afile.write(\"\\n      OUTLET ROW : \" + repr(int(nrout)))\n",
    "afile.write(\"\\n   OUTLET COLUMN : \" + repr(int(ncout)))\n",
    "afile.write(\"\\nOUTLET ELEVATION : \" + repr(float(elevout)))\n",
    "afile.close()\n",
    "##############################################\n",
    "#### structure the amatrix and bmatrix    ####\n",
    "#### arrays into index accessible arrays  ####\n",
    "##############################################\n",
    "ncol = int(ncol)\n",
    "nrow = int(nrow)\n",
    "#print(nrow,ncol)\n",
    "head = [[0.0 for j in range(ncol)] for i in range(nrow)]\n",
    "dmap = [[-999.0 for j in range(ncol)] for i in range(nrow)]\n",
    "pmap = [[0.0 for j in range(ncol)] for i in range(nrow)]\n",
    "pbmap = [[0.0 for j in range(ncol)] for i in range(nrow)]\n",
    "nr2r = len(amatrix)\n",
    "nc2r = len(amatrix[0])\n",
    "#print(nr2r,nc2r)\n",
    "col2assign = 0\n",
    "row2assign = 0\n",
    "for ir2r in range(nr2r): #i is row to assign\n",
    "    for jc2r in range(nc2r): #j is column to assign\n",
    "#        print(\"rc2r \",ir2r,jc2r,row2assign,col2assign)\n",
    "        head[row2assign][col2assign] = float(amatrix[ir2r][jc2r])\n",
    "        pmap[row2assign][col2assign] = float(bmatrix[ir2r][jc2r])\n",
    "        pbmap[row2assign][col2assign] = float(bmatrix[ir2r][jc2r])\n",
    "        col2assign += 1\n",
    "        if col2assign >= ncol:\n",
    "            col2assign = 0\n",
    "            row2assign += 1\n",
    "            break\n",
    "##############################################\n",
    "#### get min/max and mask count and report ###\n",
    "##############################################\n",
    "maxhead = 0.00000001\n",
    "minhead = 10000000.0\n",
    "countP = 0.0\n",
    "for irow in range(nrow):\n",
    "    if max(head[irow]) > maxhead:\n",
    "        maxhead = max(head[irow])\n",
    "    if min(head[irow]) < minhead:\n",
    "        minhead = min(head[irow])\n",
    "    countP = countP + sum(pbmap[irow])\n",
    "\n",
    "afile = open(fileout,\"a\")  # connect to the file; append\n",
    "afile.write(\"\\n   MIN ELEVATION : \" + repr(float(minhead)))\n",
    "afile.write(\"\\n   MAX ELEVATION : \" + repr(float(maxhead)))\n",
    "afile.write(\"\\n      MASK COUNT : \" + repr(int(countP)))\n",
    "afile.close()\n",
    "\n",
    "##############################################\n",
    "#### build grid locations for cell centers ###\n",
    "##############################################\n",
    "xg  = [0.0  for i in range(ncol)]\n",
    "yg  = [0.0  for i in range(nrow)]\n",
    "xbg = [0.0  for i in range(ncol)]\n",
    "ybg = [0.0  for i in range(nrow)]\n",
    "dx  = float(dx)\n",
    "\n",
    "yg[0]  =0.5*dx\n",
    "xg[0]  =0.5*dx\n",
    "ybg[0] =0.5*dx\n",
    "xbg[0] =0.5*dx\n",
    "for irow in range(1,nrow):\n",
    "    yg[irow]=yg[irow-1]+dx\n",
    "    ybg[irow]=ybg[irow-1]+dx\n",
    "for jcol in range(1,ncol):\n",
    "    xg[jcol]=xg[jcol-1]+dx\n",
    "    xbg[jcol]=xbg[jcol-1]+dx\n",
    "if directive == 'VERBOSE':\n",
    "    afile = open(fileout,\"a\")  # connect to the file; append\n",
    "    afile.write(\"\\n GRID CELL LOCATIONS : \\n ICELL XGRID YGRID \")\n",
    "    cellcount=1\n",
    "    for irow in range(nrow):\n",
    "        for jcol in range(ncol):\n",
    "            afile.write('\\n ' + repr(cellcount) + ' ' + repr(round(xg[jcol],3)) + ' ' + repr(round(yg[irow],3)))\n",
    "            cellcount += 1\n",
    "    afile.close()\n",
    "############ memory management ###############\n",
    "del amatrix    # release objects to free RAM #\n",
    "del bmatrix    # release objects to free RAM #\n",
    "gc.collect();  # force garbage collection    #\n",
    "##############################################\n",
    "\n",
    "##############################################\n",
    "#### locate the outlet in the grid system ####\n",
    "##############################################\n",
    "xout=xg[int(ncout)]\n",
    "yout=yg[int(nrout)]\n",
    "xmin=xg[0]\n",
    "ymin=yg[0]\n",
    "xmax=xg[ncol-1]+dx\n",
    "ymax=yg[nrow-1]+dx\n",
    "afile = open(fileout,\"a\")  # connect to the file; append\n",
    "afile.write(\"\\n SUMMARY IN GRID COORDINATES \")\n",
    "afile.write(\"\\n    (X,Y) OUTLET : \" + repr(float(xout)) + \",\" + repr(float(yout)) )\n",
    "afile.write(\"\\n     (XMIN,YMIN) : \" + repr(float(xmin)) + \",\" + repr(float(ymin)) )\n",
    "afile.write(\"\\n     (XMAX,YMAX) : \" + repr(float(xmax)) + \",\" + repr(float(ymax)))\n",
    "afile.close()\n",
    "\n",
    "########################################################################\n",
    "#### convert particle map into an attribute array (i.e. alive/dead) ####\n",
    "########################################################################\n",
    "np  = 0 # particle count\n",
    "ip  = 0 # particle index\n",
    "lox = 0 # locaton outlet x\n",
    "loy = 0 # location outlet y\n",
    "countP = int(countP)\n",
    "xp   = [0.0  for i in range(countP)] # location x of particle ip\n",
    "yp   = [0.0  for i in range(countP)] # location y of particle ip\n",
    "xps  = [0.0  for i in range(countP)] # start location x of particle ip\n",
    "yps  = [0.0  for i in range(countP)] # start location y of particle ip\n",
    "tp   = [0.0  for i in range(countP)] # location t of particle ip\n",
    "wp   = [0.0  for i in range(countP)] # attribute w of particle ip\n",
    "for irow in range(nrow):\n",
    "    for jcol in range(ncol):\n",
    "        if pbmap[irow][jcol] == 1.0:\n",
    "            xp[ip]=xg[jcol]\n",
    "            yp[ip]=yg[irow]\n",
    "            tp[ip]=0.0\n",
    "            wp[ip]=1.0 # make alive\n",
    "# add start locations to xps,yps for particle ip\n",
    "            xps[ip]=xg[jcol]\n",
    "            yps[ip]=yg[irow]\n",
    "            np += 1\n",
    "            ip += 1\n",
    "        else:\n",
    "            xbg[jcol]= -1e9 # large negative float to indicate boundary\n",
    "            ybg[irow]= -1e9 # large negative float to indicate boundary\n",
    "        if xg[jcol] == xout and yg[irow] == yout : # check if outlet\n",
    "            lop = ip-1\n",
    "            lox = jcol\n",
    "            loy = irow\n",
    "afile = open(fileout,\"a\")  # connect to the file; append\n",
    "afile.write(\"\\n SUMMARY OF PARTICLE ARRAY CALCULATIONS \")\n",
    "afile.write(\"\\n            PARTICLE ARRAY LENGTH : \" + repr(np))\n",
    "afile.write(\"\\n            PARTICLE INPUT COUNT  : \" + repr(countP))\n",
    "afile.write(\"\\n            OUTLET      (LOX,LOY) : \" + repr(float(lox)) + \",\" + repr(float(loy)))\n",
    "afile.write(\"\\n  OUTLET INDEX IN PARTICLE ARRAY  : \" + repr(lop))\n",
    "afile.close()\n",
    "\n",
    "################################\n",
    "### DEBUGGING VERBOSE OUTPUT ###\n",
    "################################\n",
    "if directive == 'VERBOSE':\n",
    "    afile = open(fileout,\"a\")  # connect to the file; append\n",
    "    afile.write(\"\\n PARTICLE START LOCATIONS : \\n IPART XPART YPART \")\n",
    "    cellcount=1\n",
    "    for ip in range(np):\n",
    "        afile.write('\\n ' + repr(ip) + ' ' + repr(round(xp[ip],3)) + ' ' + repr(round(yp[ip],3)))\n",
    "    afile.close()\n",
    "# build a plot of particle positions and outlet position\n",
    "plotfileout = filename.replace(\"mat.dat\",\"000.png\")\n",
    "#    plt.figure()\n",
    "plottitle=\"Initial Particle Positions\"\n",
    "#    plt.scatter(xps, yps, s=1, color='blue')\n",
    "#    plt.scatter(xout, yout, s=100, color='magenta')\n",
    "#    plt.savefig(plotfileout);\n",
    "mappart(plotfileout,plottitle,xps,yps,xout,yout)  \n",
    "\n",
    "#################################\n",
    "#### compute velocity field  ####\n",
    "#################################\n",
    "vx  = [[0.0 for j in range(ncol)] for i in range(nrow)] # 0 lists to store velocity\n",
    "vy  = [[0.0 for j in range(ncol)] for i in range(nrow)] # 0 lists to store velocity\n",
    "cman = float(cman)\n",
    "nman = float(nman)\n",
    "fdeep = float(fdeep)\n",
    "\n",
    "def getdirs(head,vx,vy,nrow,ncol,cman,rman,dx,fdepth,pbmap,dmap,lox,loy,xg,yg):\n",
    "    #########################\n",
    "    #### Some constants  ####\n",
    "    #########################\n",
    "    import math\n",
    "    dxinv=1.0/(dx*3.25) # XY distances in feet\n",
    "    conveyance=(cman/rman)*fdepth**(2./3.)\n",
    "    channel=(cman/rman)*(2.0*fdepth)**(2./3.)\n",
    "    dsqrtiv=1.0/math.sqrt(2.0)\n",
    "    d = [-10.0 for i in range(9)]\n",
    "###################################\n",
    "###         Directions         ####\n",
    "###                            ####\n",
    "###     1       2        3     ####\n",
    "###                            ####\n",
    "###     4       0        5     ####\n",
    "###                            ####\n",
    "###     6       7        8     ####\n",
    "###                            ####\n",
    "###################################    \n",
    "    # interior cells\n",
    "    for irow in range(1,nrow-1):\n",
    "        for jcol in range(1,ncol-1):\n",
    "            d[0]=-1.0\n",
    "            d[1]=(head[irow][jcol]-head[irow-1][jcol-1])*pbmap[irow-1][jcol-1]\n",
    "            d[2]=(head[irow][jcol]-head[irow-1][jcol  ])*pbmap[irow-1][jcol  ]\n",
    "            d[3]=(head[irow][jcol]-head[irow-1][jcol+1])*pbmap[irow-1][jcol+1]\n",
    "            d[4]=(head[irow][jcol]-head[irow  ][jcol-1])*pbmap[irow  ][jcol-1]\n",
    "            d[5]=(head[irow][jcol]-head[irow  ][jcol+1])*pbmap[irow  ][jcol+1]\n",
    "            d[6]=(head[irow][jcol]-head[irow+1][jcol-1])*pbmap[irow+1][jcol-1]\n",
    "            d[7]=(head[irow][jcol]-head[irow+1][jcol  ])*pbmap[irow+1][jcol  ]\n",
    "            d[8]=(head[irow][jcol]-head[irow+1][jcol+1])*pbmap[irow+1][jcol+1]\n",
    "            # check bigger then zero\n",
    "            big = 0\n",
    "            idir = 0\n",
    "            for ii in range(1,9):\n",
    "                if d[ii] > big:\n",
    "                    big = d[ii]\n",
    "                    idir = ii\n",
    "            # assign direction to dmap; if boundary cell ignore\n",
    "            if pbmap[irow][jcol] > 0:\n",
    "                dmap[irow][jcol]=idir*pbmap[irow][jcol]\n",
    "            else:\n",
    "                dmap[irow][jcol]=idir*pbmap[irow][jcol]-10.0\n",
    "            # compute speed and time\n",
    "            if   idir == 1:\n",
    "                vx[irow][jcol]=conveyance*math.sqrt(d[1]*dxinv*dsqrtiv)\n",
    "                vy[irow][jcol]=math.sqrt(2.0)*dx*3.25/vx[irow][jcol]\n",
    "            elif idir == 2:   \n",
    "                vx[irow][jcol]=conveyance*math.sqrt(d[2]*dxinv)\n",
    "                vy[irow][jcol]=dx*3.25/vx[irow][jcol]\n",
    "            elif idir == 3:\n",
    "                vx[irow][jcol]=conveyance*math.sqrt(d[3]*dxinv*dsqrtiv)\n",
    "                vy[irow][jcol]=math.sqrt(2.0)*dx*3.25/vx[irow][jcol]\n",
    "            elif idir == 4:\n",
    "                vx[irow][jcol]=conveyance*math.sqrt(d[4]*dxinv)\n",
    "                vy[irow][jcol]=dx*3.25/vx[irow][jcol] \n",
    "            elif idir == 5:\n",
    "                vx[irow][jcol]=conveyance*math.sqrt(d[5]*dxinv)\n",
    "                vy[irow][jcol]=dx*3.25/vx[irow][jcol]  \n",
    "            elif idir == 6:\n",
    "                vx[irow][jcol]=conveyance*math.sqrt(d[6]*dxinv*dsqrtiv)\n",
    "                vy[irow][jcol]=math.sqrt(2.0)*dx*3.25/vx[irow][jcol] \n",
    "            elif idir== 7:\n",
    "                vx[irow][jcol]=conveyance*math.sqrt(d[7]*dxinv)\n",
    "                vy[irow][jcol]=dx*3.25/vx[irow][jcol]  \n",
    "            elif idir == 8:  \n",
    "                vx[irow][jcol]=conveyance*math.sqrt(d[8]*dxinv*dsqrtiv)\n",
    "                vy[irow][jcol]=math.sqrt(2.0)*dx*3.25/vx[irow][jcol] \n",
    "            elif idir == 0:\n",
    "# these are sinks or plateaus, route to outlet by cartesian path\n",
    "                vy[irow][jcol]=-2.\n",
    "                vx[irow][jcol]   = head[irow][jcol]-head[loy][lox]\n",
    "                dist=math.sqrt( (xg[jcol]-xg[lox])**2 + (yg[irow]-yg[loy])**2 )\n",
    "                if dist != 0.0:\n",
    "                    vx[irow][jcol]   = conveyance*math.sqrt(vx[irow][jcol]*dxinv*dsqrtiv)\n",
    "                    vy[irow][jcol]   = math.sqrt(2.0)*dist*3.25/vx[irow][jcol] \n",
    "    # if outlet cell override direction \n",
    "    dmap[loy][lox]=0*pbmap[loy][lox]\n",
    "    vx[loy][lox]=0.0\n",
    "    vy[loy][lox]=0.0\n",
    "    return()\n",
    "\n",
    "getdirs(head,vx,vy,nrow,ncol,cman,nman,dx,fdeep,pbmap,dmap,lox,loy,xg,yg)\n",
    "\n",
    "################################\n",
    "### DEBUGGING VERBOSE OUTPUT ###\n",
    "################################\n",
    "if directive == 'VERBOSE' or directive == 'DMAP':\n",
    "    debugfile = filename.replace(\"mat.dat\",\"dbmap.dat\")\n",
    "    afile = open(debugfile,\"w\")  # connect to the file; overwrite\n",
    "# direction code\n",
    "    afile.write(\"DIRECTION MAP : \\n IROW : JCOL :    X(JCOL) :    Y(IROW) : ELEVATION : DIRECTION :   SPEED : PATH-TIME : PBMAP \")\n",
    "    for irow in range(nrow):\n",
    "        for jcol in range(ncol):\n",
    "            afile.write('\\n  %3i :  %3i : %10.3f : %10.3f :   %7.2f :      %4i : %7.2f :   %7.2f : %7.2f ' % (irow,jcol,xg[jcol],yg[irow],\\\n",
    "                        head[irow][jcol],dmap[irow][jcol],vx[irow][jcol],vy[irow][jcol],pbmap[irow][jcol]))\n",
    "            #afile.write('\\n ' + repr(irow) + ' ' + repr(jcol) + ' ' + repr(round(xg[jcol],3)) + ' ' + repr(round(yg[irow],3)) + ' ' \\\n",
    "             #           + repr(round(head[irow][jcol],3)) + ' ' + repr(round(dmap[irow][jcol],3))+ ' ' + repr(round(vx[irow][jcol],3)) \\\n",
    "              #          + ' ' + repr(round(vy[irow][jcol],3)))\n",
    "    afile.close()\n",
    "    \n",
    "##################################################\n",
    "#### regular output static contents completed ####\n",
    "##################################################\n",
    "afile = open(fileout,\"a\")  # connect to the file; append\n",
    "afile.write(\"\\n  VELOCITY MAPS BUILT \")\n",
    "afile.write(\"\\n  PARTICLE MAPS BUILT \")\n",
    "afile.write(\"\\n DIRECTION MAPS BUILT \")\n",
    "\n",
    "maxvx = 0.00000001 # Different floats on purpose to force different memory addresses\n",
    "maxvy =  0.0000001\n",
    "minvx = 10000000.0\n",
    "minvy =  1000000.0\n",
    "for irow in range(nrow):\n",
    "    for jcol in range(ncol):\n",
    "        if vx[irow][jcol] > maxvx:\n",
    "            maxvx = vx[irow][jcol]\n",
    "        if vy[irow][jcol] > maxvy:\n",
    "            maxvy = vy[irow][jcol]\n",
    "        if vx[irow][jcol] < minvx:\n",
    "            minvx = vx[irow][jcol]\n",
    "        if vy[irow][jcol] < minvy:\n",
    "            minvy = vy[irow][jcol]\n",
    "afile.write(\"\\n   MIN VX VALUE = : \" + repr(round(minvx,3)))\n",
    "afile.write(\"\\n   MIN VY VALUE = : \" + repr(round(minvy,3)))\n",
    "afile.write(\"\\n   MAX VX VALUE = : \" + repr(round(maxvx,3)))\n",
    "afile.write(\"\\n   MAX VY VALUE = : \" + repr(round(maxvy,3)))\n",
    "\n",
    "afile.close()\n",
    "\n",
    "def findpart(xp,yp,xg,yg,nrows,ncols,ip):\n",
    "# all arrays must exist, lpx and lpy are returned in call\n",
    "# set search distance\n",
    "    big = 1.0e9\n",
    "# locate nearest grid point\n",
    "    dist1=big\n",
    "    dist2=big\n",
    "    for irow in range(nrows):\n",
    "        for jcol in range(ncols): \n",
    "            dist2 = (xp[ip]-xg[jcol])**2 + (yp[ip]-yg[irow])**2\n",
    "            if dist2 < dist1:\n",
    "                dist1 = dist2\n",
    "                lpx=jcol\n",
    "                lpy=irow\n",
    "    return(lpy,lpx) # should operate on arrays in place\n",
    "\n",
    "def movepart(xp,yp,xg,yg,vx,vy,nrow,ncol,ip,dmap,tp,lox,loy):\n",
    "# function to move a single particle of index ip in the particle attribute array\n",
    "# locate the particle cell index\n",
    "    ploc=findpart(xp,yp,xg,yg,nrow,ncol,ip)\n",
    "    lpx=ploc[1]\n",
    "    lpy=ploc[0]\n",
    "# find direction to move\n",
    "    try: # find direction to move\n",
    "        dmove=int(dmap[lpy][lpx])\n",
    "    except: # raise exception and exit\n",
    "        print(\"FailDMOVE at\",lpy,lpx)\n",
    "#        exit()\n",
    "    ##print(\"dmove\",dmove,lpx,lpy)\n",
    "# find time to move\n",
    "    try: # find time to move\n",
    "        tmove=vy[lpy][lpx]\n",
    "    except: # raise exception and exit\n",
    "        print(\"FailTMOVE at\",lpy,lpx)\n",
    "#        exit()\n",
    "        \n",
    "        flag = 0\n",
    "# move the particle \n",
    "    if dmove == 1: # left up - valid\n",
    "        xp[ip]=xg[lpx-1]\n",
    "        yp[ip]=yg[lpy-1]\n",
    "        tp[ip]=tp[ip]+tmove\n",
    "    if dmove == 2: # up - fixed\n",
    "        xp[ip]=xg[lpx  ]\n",
    "        yp[ip]=yg[lpy-1]\n",
    "        tp[ip]=tp[ip]+tmove\n",
    "    if dmove == 3: # right up - fixed\n",
    "        xp[ip]=xg[lpx+1]\n",
    "        yp[ip]=yg[lpy-1]\n",
    "        tp[ip]=tp[ip]+tmove\n",
    "    if dmove == 4: # left - valid\n",
    "        xp[ip]=xg[lpx-1]\n",
    "        yp[ip]=yg[lpy  ]\n",
    "        tp[ip]=tp[ip]+tmove\n",
    "    if dmove == 5: # right - fixed\n",
    "        xp[ip]=xg[lpx+1]\n",
    "        yp[ip]=yg[lpy  ]\n",
    "        tp[ip]=tp[ip]+tmove\n",
    "    if dmove == 6: # left down - valid\n",
    "        xp[ip]=xg[lpx-1]\n",
    "        yp[ip]=yg[lpy+1]\n",
    "        tp[ip]=tp[ip]+tmove\n",
    "    if dmove == 7: # down - fixed\n",
    "        xp[ip]=xg[lpx  ]\n",
    "        yp[ip]=yg[lpy+1]\n",
    "        tp[ip]=tp[ip]+tmove\n",
    "    if dmove == 8: # right down - fixed\n",
    "        xp[ip]=xg[lpx+1]\n",
    "        yp[ip]=yg[lpy+1]\n",
    "        tp[ip]=tp[ip]+tmove\n",
    "    if dmove == 0: # outlet, sink, or plateau\n",
    "        # check if outlet\n",
    "        if xp[ip]== xg[lox] and yp[ip]==yg[loy]:\n",
    "            tp[ip]=tp[ip]\n",
    "            #print(\"OUTLET\",ip,xp[ip],yp[ip],xg[lox],yg[loy])\n",
    "        else: # must be a sink or plateau -- route to outlet\n",
    "            #print(\"SUMP IN\",ip,xp[ip],yp[ip],xg[lox],yg[loy])\n",
    "            xp[ip]=xg[lox]\n",
    "            yp[ip]=yg[loy]\n",
    "            tp[ip]=tp[ip]+tmove\n",
    "            #print(\"SUMP OUT\",ip,xp[ip],yp[ip],xg[lox],yg[loy])\n",
    "    if dmove == 9: # pit\n",
    "        xp[ip]=xg[lox]\n",
    "        yp[ip]=yg[loy]\n",
    "        tp[ip]=tp[ip]+tmove\n",
    "    if dmove == 10: # boundary\n",
    "        print('ERROR -- ATTEMPTING TO MOVE IN BOUNDARY ARRAY')\n",
    "        print('IP,LPX,LPY   =',ip,lpy,lpx)\n",
    "        print('DMOVE,TMOVE  =',dmove,tmove)\n",
    "    return()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "48\n"
     ]
    }
   ],
   "source": [
    "######################################################\n",
    "#### MOVE ALL CURRENT PARTICLES UNTIL EXIT OR DIE ####\n",
    "######################################################\n",
    "npmv = 0 #number of particles moved\n",
    "#lpx = -1 # initial value lpx\n",
    "#lpy = -2 # initial value lpy\n",
    "alife = float(alife)\n",
    "maxtry = int(0.2*(nrow*ncol)**0.5) # longest path guess.\n",
    "print(maxtry)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PARTICLES MOVED SO FAR :  0 16\n",
      "PARTICLES MOVED SO FAR :  2000 3\n",
      "PARTICLES MOVED SO FAR :  4000 8\n",
      "PARTICLES MOVED SO FAR :  6000 0\n",
      "PARTICLES MOVED SO FAR :  8000 5\n",
      "PARTICLES MOVED SO FAR :  10000 10\n",
      "PARTICLES MOVED SO FAR :  12000 7\n",
      "PARTICLES MOVED SO FAR :  14000 2\n",
      "PARTICLES MOVED SO FAR :  16000 9\n",
      "PARTICLES MOVED SO FAR :  18000 11\n",
      "PARTICLES MOVED SO FAR :  20000 7\n",
      "PARTICLES MOVED SO FAR :  22000 7\n",
      "PARTICLES MOVED SO FAR :  24000 2\n",
      "PARTICLES MOVED SO FAR :  26000 1\n",
      "PARTICLES MOVED SO FAR :  28000 2\n",
      "PARTICLES MOVED SO FAR :  30000 22\n",
      "PARTICLE COUNT MOVED :  31775\n",
      "MOVE LOOP ENDED\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for ip in range(np):  # particle index loop\n",
    "    for im in range(maxtry): # maximum steps to traverse area\n",
    "        ploc=findpart(xp,yp,xg,yg,nrow,ncol,ip)\n",
    "        ##print(\"particle loc B4 move: \",ip,xp[ip],yp[ip],tp[ip],ploc[0],ploc[1],dmap[ploc[0]][ploc[1]],head[ploc[0]][ploc[1]],loy,lox)\n",
    "        movepart(xp,yp,xg,yg,vx,vy,nrow,ncol,ip,dmap,tp,lox,loy) # move particle one step\n",
    "        ploc=findpart(xp,yp,xg,yg,nrow,ncol,ip) # locate particle\n",
    "        ##print(\"particle loc AF move: \",ip,xp[ip],yp[ip],tp[ip],ploc[0],ploc[1],dmap[ploc[0]][ploc[1]],head[ploc[0]][ploc[1]],loy,lox)\n",
    "        # check if it made it to outlet\n",
    "        if ploc[0] == loy and ploc[1] == lox:\n",
    "            #print(\"REACH OUTLET : \",ip,ploc[0],ploc[1],loy,lox,im)\n",
    "            break #exit the traverse loop and process next particle\n",
    "        # check for particle death\n",
    "        death = random.random() # generate a random number in range (0,1)\n",
    "        if death > alife:\n",
    "            wp[ip]=0.0 # particle dies\n",
    "            break #exit the traverse loop and process next particle\n",
    "            print('die')\n",
    "    if ip % 2000 == 0:\n",
    "        print(\"PARTICLES MOVED SO FAR : \",ip,im)\n",
    "    npmv += 1 \n",
    "print(\"PARTICLE COUNT MOVED : \",npmv)\n",
    "# build a plot of particle positions and outlet position\n",
    "plotfileout = filename.replace(\"mat.dat\",\"001.png\")\n",
    "#    plt.figure()\n",
    "plottitle=\"Final Particle Positions\"\n",
    "#    plt.scatter(xps, yps, s=1, color='blue')\n",
    "#    plt.scatter(xout, yout, s=100, color='magenta')\n",
    "#    plt.savefig(plotfileout);\n",
    "mappart(plotfileout,plottitle,xp,yp,xout,yout)  \n",
    "print(\"MOVE LOOP ENDED\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6150.942583797583 6150.942583797583 31775.0\n"
     ]
    }
   ],
   "source": [
    "#############################\n",
    "#### sort the time array ####\n",
    "#############################\n",
    "# np=int(countP) ## repair accidental numpy naming\n",
    "sorted_time = sorted(tp)\n",
    "print(max(sorted_time),max(tp),sum(wp))\n",
    "#len(sorted_time)\n",
    "afile = open(fileout,\"a\")  # connect to the file; append\n",
    "afile.write(\"\\n CUMULATIVE ARRIVAL TIME DISTRIBUTION \\n TIME  FRACTION  NUMBER\")\n",
    "gc.collect();  # force garbage collection    #\n",
    "for ip in range(0,np,100):  # particle index loop\n",
    "    # print(ip,sorted_time[ip]/20.0) ## activate to debug\n",
    "    afile.write('\\n  %10.3f  %10.3f  %10i ' % (sorted_time[ip]/20.0,float(ip)/float(np),ip))\n",
    "afile.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit Leinhard Hydrograph\n",
    "# Instructions:\n",
    "# Load the merit function, provide filename from DTRM program.  \n",
    "# Make initial guess using the result() function\n",
    "# Supply to Powell Direction Set method, run until success or failure.  \n",
    "# If success, insert solution into result function and plot.\n",
    "\n",
    "def merit(x): \n",
    "# function to minimize to find values of tbar and shape\n",
    "# x[0] == tbar\n",
    "# x[1] == shape\n",
    "# Script reads sta01234567.out.txt files and plots empirical cumulative and leinhard hydrographs and \n",
    "# systematically finds best values for tbar and shape\n",
    "\n",
    "    filename = 'sta08055700.out.dat' # filename to read\n",
    "\n",
    "    def prMat(amatrix):\n",
    "    # prints the contents of amatrix to stdio\n",
    "        howMany = len(amatrix) # get row count\n",
    "        howWide = len(amatrix[0]) # get column count\n",
    "        for irow in range(howMany):\n",
    "            print(amatrix[irow])\n",
    "        return()\n",
    "\n",
    "################################\n",
    "#   connect and read file      #\n",
    "################################\n",
    "    afile = open(filename,\"r\")  # connect and read file \n",
    "    amatrix = [] # null object to store read\n",
    "    rowNumA = 0\n",
    "    rowRead = 0\n",
    "    substring1=\"ALIVE COUNT\"\n",
    "    for line in afile:\n",
    "        if rowRead < 42: # skip first 42 rows\n",
    "#        print(' Row Read: ',rowRead,' Content: ',line)\n",
    "            rowRead = rowRead+1\n",
    "        elif line.find(substring1) != -1: # check for last row\n",
    "        #print('Last Row')\n",
    "            continue\n",
    "        else: # read the meaningful data\n",
    "            amatrix.append([float(n) for n in line.strip().split()])\n",
    "            rowNumA += 1\n",
    "    afile.close() # Disconnect the file\n",
    "#print(rowNumA); # for debugging activate\n",
    "#prMat(amatrix); # for debugging activate\n",
    "################################\n",
    "#   build lists for plotting   #\n",
    "################################\n",
    "\n",
    "    time = []\n",
    "    acc_flow = []\n",
    "    mod_flow = []\n",
    "    for irow in range(rowNumA):\n",
    "        time.append(amatrix[irow][0])\n",
    "        acc_flow.append(amatrix[irow][1])\n",
    "\n",
    "################################\n",
    "#  Leinhard Hydrograph Kernel  #\n",
    "################################\n",
    "    def kernelfn(tbar,time,scale=2,shape=3,beta=2):\n",
    "        ''' \n",
    "        kernel function for a unit hydrograph - uses a gamma-type hydrograph\n",
    "\n",
    "          scale: a scaling parameter, should be 2, but left adjustable for grins\n",
    "          shape: Nash's reservoir number\n",
    "           tbar: Characteristic time, lag time in NRCS, time-to-peak, \n",
    "                 and time-of-concentration are all similar concepts.\n",
    "           beta: Exponent controling decay rate in exponential part of function; \n",
    "                 Should be a 2 or 3 for typical watersheds, but left adjusible for \n",
    "                 ornery cases.\n",
    "        '''\n",
    "        import math\n",
    "#        term1 = (scale/tbar)/math.gamma(shape)\n",
    " #       term2 = (time)/tbar\n",
    "  #      term3 = term2**(2*shape-1)\n",
    "   #     term4 = math.exp(-1*term2**beta)\n",
    "    #    kernelfn = term1*term3*term4\n",
    "        a5 = time/tbar\n",
    "        a6 = shape/beta\n",
    "        a7 = math.gamma(a6)\n",
    "        a8 = a6**a6\n",
    "        a9 = 1/tbar\n",
    "        a10 = a5**(shape-1)\n",
    "        a11 = math.exp(-a6*(a5**beta))\n",
    "        a12 = a9*a10\n",
    "        a13 = beta/a7\n",
    "        a14 = a13*a12*a11*a8\n",
    "        kernelfn=a14\n",
    "        return kernelfn\n",
    "\n",
    "#########################\n",
    "#  Leinhard Parameters  #\n",
    "#########################\n",
    "    scale = 2 # a scale constant - has units of rate\n",
    "    shape = x[1] # Adjust N value \n",
    "    tbar = x[0] # Adjust t_rms value \n",
    "    beta = 2 # Use beta value (1 or 2) \n",
    "\n",
    "    inc_model = [] # accumulated Leinhard model\n",
    "    for irow in range(rowNumA):\n",
    "        inc_model.append(kernelfn(tbar,time[irow],scale,shape,beta))\n",
    "\n",
    "# Accumulate the values\n",
    "    acc_model = []\n",
    "    acc_model.append(0.0)\n",
    "    for irow in range(1,rowNumA):\n",
    "        acc_model.append( 0.5*(inc_model[irow]+inc_model[irow-1])*(time[irow]-time[irow-1])+acc_model[irow-1] )\n",
    "#    print(inc_model[irow],acc_model[irow])   # activate for debug\n",
    "\n",
    "# Compute the merit function value\n",
    "    sse=0.0\n",
    "    for irow in range(1,rowNumA):\n",
    "        sse=sse+(acc_model[irow]-acc_flow[irow])**2\n",
    "\n",
    "    return(sse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.037177\n",
      "         Iterations: 5\n",
      "         Function evaluations: 140\n",
      "[108.92470621   4.32254702]\n"
     ]
    }
   ],
   "source": [
    "import numpy \n",
    "from scipy.optimize import minimize\n",
    "\n",
    "x0 = numpy.array([79.0,1.4])\n",
    "res = minimize(merit, x0, method='powell',options={'disp': True})\n",
    "\n",
    "print(res.x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "def result(x): \n",
    "# function to plot result of optimization - feed the optimization results\n",
    "# x[0] == tbar\n",
    "# x[1] == shape\n",
    "# Script reads sta01234567.out.txt files and plots empirical cumulative and leinhard hydrographs and \n",
    "# systematically finds best values for tbar and shape\n",
    "\n",
    "    filename = 'sta08055700.out.dat' # filename to read\n",
    "\n",
    "    def prMat(amatrix):\n",
    "    # prints the contents of amatrix to stdio\n",
    "        howMany = len(amatrix) # get row count\n",
    "        howWide = len(amatrix[0]) # get column count\n",
    "        for irow in range(howMany):\n",
    "            print(amatrix[irow])\n",
    "        return()\n",
    "\n",
    "\n",
    "    import matplotlib.pyplot as plt  \n",
    "\n",
    "    def Plot2Stairs(list1,list2,list3,list4,ptitle,xlabel,ylabel,legend1,legend2):\n",
    "# Create a line chart of list2,list4 on y axis and list1,list3 on x axis\n",
    "        mydata = plt.figure(figsize = (18,6)) # build a drawing canvass from figure class; aspect ratio 4x3\n",
    "        plt.step(list1, list2, c='red', marker='.',linewidth=2) # basic line plot\n",
    "        plt.step(list3, list4, c='blue', marker='.',linewidth=1) # basic line plot\n",
    "        plt.xlabel(xlabel) # label the x-axis\n",
    "        plt.ylabel(ylabel) # label the y-axis, notice the LaTex markup\n",
    "        plt.legend([legend1,legend2]) # legend for each series\n",
    "        plt.title(ptitle) # make a plot title\n",
    "#    plt.xlim(100000, 120000)\n",
    "#    plt.ylim(2700, 2850)\n",
    "        plt.grid() # display a grid\n",
    "        plt.show() # display the plot\n",
    "        return()\n",
    "################################\n",
    "#   connect and read file      #\n",
    "################################\n",
    "    afile = open(filename,\"r\")  # connect and read file \n",
    "    amatrix = [] # null object to store read\n",
    "    rowNumA = 0\n",
    "    rowRead = 0\n",
    "    substring1=\"ALIVE COUNT\"\n",
    "    for line in afile:\n",
    "        if rowRead < 42: # skip first 42 rows\n",
    "#        print(' Row Read: ',rowRead,' Content: ',line)\n",
    "            rowRead = rowRead+1\n",
    "        elif line.find(substring1) != -1: # check for last row\n",
    "        #print('Last Row')\n",
    "            continue\n",
    "        else: # read the meaningful data\n",
    "            amatrix.append([float(n) for n in line.strip().split()])\n",
    "            rowNumA += 1\n",
    "    afile.close() # Disconnect the file\n",
    "#print(rowNumA); # for debugging activate\n",
    "#prMat(amatrix); # for debugging activate\n",
    "################################\n",
    "#   build lists for plotting   #\n",
    "################################\n",
    "\n",
    "    time = []\n",
    "    acc_flow = []\n",
    "    mod_flow = []\n",
    "    for irow in range(rowNumA):\n",
    "        time.append(amatrix[irow][0])\n",
    "        acc_flow.append(amatrix[irow][1])\n",
    "\n",
    "################################\n",
    "#  Leinhard Hydrograph Kernel  #\n",
    "################################\n",
    "    def kernelfn(tbar,time,scale=2,shape=3,beta=2):\n",
    "        ''' \n",
    "        kernel function for a unit hydrograph - uses a gamma-type hydrograph\n",
    "\n",
    "          scale: a scaling parameter, should be 2, but left adjustable for grins\n",
    "          shape: Nash's reservoir number\n",
    "           tbar: Characteristic time, lag time in NRCS, time-to-peak, \n",
    "                 and time-of-concentration are all similar concepts.\n",
    "           beta: Exponent controling decay rate in exponential part of function; \n",
    "                 Should be a 2 or 3 for typical watersheds, but left adjusible for \n",
    "                 ornery cases.\n",
    "        '''\n",
    "        import math\n",
    "#        term1 = (scale/tbar)/math.gamma(shape)\n",
    " #       term2 = (time)/tbar\n",
    "  #      term3 = term2**(2*shape-1)\n",
    "   #     term4 = math.exp(-1*term2**beta)\n",
    "    #    kernelfn = term1*term3*term4\n",
    "        a5 = time/tbar\n",
    "        a6 = shape/beta\n",
    "        a7 = math.gamma(a6)\n",
    "        a8 = a6**a6\n",
    "        a9 = 1/tbar\n",
    "        a10 = a5**(shape-1)\n",
    "        a11 = math.exp(-a6*(a5**beta))\n",
    "        a12 = a9*a10\n",
    "        a13 = beta/a7\n",
    "        a14 = a13*a12*a11*a8\n",
    "        kernelfn=a14\n",
    "        return kernelfn\n",
    "\n",
    "#########################\n",
    "#  Leinhard Parameters  #\n",
    "#########################\n",
    "    scale = 2 # a scale constant - has units of rate\n",
    "    shape = x[1] # Adjust N value \n",
    "    tbar = x[0] # Adjust t_rms value \n",
    "    beta = 2 # Use beta value (1 or 2) \n",
    "\n",
    "    inc_model = [] # accumulated Leinhard model\n",
    "    for irow in range(rowNumA):\n",
    "        inc_model.append(kernelfn(tbar,time[irow],scale,shape,beta))\n",
    "\n",
    "# Accumulate the values\n",
    "    acc_model = []\n",
    "    acc_model.append(0.0)\n",
    "    for irow in range(1,rowNumA):\n",
    "        acc_model.append( 0.5*(inc_model[irow]+inc_model[irow-1])*(time[irow]-time[irow-1])+acc_model[irow-1] )\n",
    "#    print(inc_model[irow],acc_model[irow])   # activate for debug\n",
    "\n",
    "# Compute the merit function value\n",
    "    sse=0.0\n",
    "    for irow in range(1,rowNumA):\n",
    "        sse=sse+(acc_model[irow]-acc_flow[irow])**2\n",
    "\n",
    "    ptitle=\"DTRM Analysis for \" + filename + \\\n",
    "    \"\\n Leinhard Parameters : \" + \\\n",
    "    \"\\n t_rms : \" + repr(round(tbar,3)) + \\\n",
    "    \"\\n N : \" + repr(round(shape,3)) + \\\n",
    "    \"\\n Beta : \"+ repr(beta) + \\\n",
    "    \"\\n SSE : \" + repr(round(sse,6))\n",
    "    xlabel=\"Time (minutes)\"\n",
    "    ylabel=\"Washout Fraction\"\n",
    "    legend1=\"DTRM Time-Area\"\n",
    "    legend2=\"Fitted Leinhard Time-Area\"\n",
    "\n",
    "    Plot2Stairs(time,acc_flow,time,acc_model,ptitle,xlabel,ylabel,legend1,legend2);\n",
    "    return(sse);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "0.044126807636904235"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result([res.x[0] , res.x[1]])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
