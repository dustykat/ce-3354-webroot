{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x864 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Script reads RARO files and plots hydrographs\n",
    "# Data from DTRM analysis\n",
    "F = 0.78 # Use F value from DTRM model\n",
    "CN = 93.25 # Use value from GIS\n",
    "scale = 2 # a scale constant - has units of rate\n",
    "shape = 1.3 # Use N value from DTRM analysis spreadsheet\n",
    "tbar = 65.5 # Use t_rms value from DTRM analysis spreadsheet\n",
    "beta = 2 # Use beta value (1 or 2) from DTRM analysis spreadsheet\n",
    "filename = 'rr1m_sta08057320_1973_0603.dat' # filename to read\n",
    "\n",
    "def prMat(amatrix):\n",
    "    # prints the contents of amatrix to stdio\n",
    "    howMany = len(amatrix) # get row count\n",
    "    lowWide = len(amatrix[0]) # get column count\n",
    "    for irow in range(howMany):\n",
    "        print(amatrix[irow])\n",
    "    return()\n",
    "\n",
    "# plotting functions from CE 5361\n",
    "import matplotlib.pyplot as plt  \n",
    "\n",
    "def Plot2Lines(list1,list2,list3,list4,ptitle,xlabel,ylabel,legend1,legend2):\n",
    "# Create a line chart of list2,list4 on y axis and list1,list3 on x axis\n",
    "    mydata = plt.figure(figsize = (18,6)) # build a drawing canvass from figure class; aspect ratio 4x3\n",
    "    plt.plot(list1, list2, c='red', marker='.',linewidth=2) # basic line plot\n",
    "    plt.plot(list3, list4, c='blue', marker='.',linewidth=1) # basic line plot\n",
    "    plt.xlabel(xlabel) # label the x-axis\n",
    "    plt.ylabel(ylabel) # label the y-axis, notice the LaTex markup\n",
    "    plt.legend([legend1,legend2]) # legend for each series\n",
    "    plt.title(ptitle) # make a plot title\n",
    "#    plt.xlim(100000, 120000)\n",
    "#    plt.ylim(2700, 2850)\n",
    "    plt.grid() # display a grid\n",
    "    plt.show() # display the plot\n",
    "    return()\n",
    "\n",
    "def Plot2Stairs(list1,list2,list3,list4,ptitle,xlabel,ylabel,legend1,legend2):\n",
    "# Create a line chart of list2,list4 on y axis and list1,list3 on x axis\n",
    "    mydata = plt.figure(figsize = (18,6)) # build a drawing canvass from figure class; aspect ratio 4x3\n",
    "    plt.step(list1, list2, c='red', marker='.',linewidth=2) # basic line plot\n",
    "    plt.step(list3, list4, c='blue', marker='.',linewidth=1) # basic line plot\n",
    "    plt.xlabel(xlabel) # label the x-axis\n",
    "    plt.ylabel(ylabel) # label the y-axis, notice the LaTex markup\n",
    "    plt.legend([legend1,legend2]) # legend for each series\n",
    "    plt.title(ptitle) # make a plot title\n",
    "#    plt.xlim(100000, 120000)\n",
    "#    plt.ylim(2700, 2850)\n",
    "    plt.grid() # display a grid\n",
    "    plt.show() # display the plot\n",
    "    return()\n",
    "\n",
    "def Plot3Stairs(list1,list2,list3,list4,list5,list6,ptitle,xlabel,ylabel,legend1,legend2,legend3,savefile):\n",
    "# Create a line chart of list2,list4 on y axis and list1,list3 on x axis\n",
    "    mydata = plt.figure(figsize = (18,12)) # build a drawing canvass from figure class; aspect ratio 4x3\n",
    "    plt.step(list1, list2, c='red', marker='',linewidth=2) # basic line plot\n",
    "    plt.step(list3, list4, c='magenta', marker='',linewidth=2) # basic line plot\n",
    "    plt.step(list5, list6, c='blue', marker='',linewidth=2) # basic line plot\n",
    "    plt.xlabel(xlabel) # label the x-axis\n",
    "    plt.ylabel(ylabel) # label the y-axis, notice the LaTex markup\n",
    "    plt.legend([legend1,legend2,legend3]) # legend for each series\n",
    "    plt.title(ptitle) # make a plot title\n",
    "#    plt.xlim(100000, 120000)\n",
    "#    plt.ylim(2700, 2850)\n",
    "    plt.grid() # display a grid\n",
    "    plt.savefig(savefile,bbox_inches='tight',pad_inches=0.5) # save to a file for documents\n",
    "    plt.show() # display the plot\n",
    "    return()\n",
    "\n",
    "################################\n",
    "#   connect and read file      #\n",
    "################################\n",
    "\n",
    "#filename = 'rr1m_sta08048530_1970_0425.dat' # filename to read\n",
    "afile = open(filename,\"r\")  # connect and read file \n",
    "amatrix = [] # null object to store read\n",
    "rowNumA = 0\n",
    "for line in afile:\n",
    "# if line contains comment statement then skip\n",
    "    if line[0]==\"#\":\n",
    "#        print('comment line')\n",
    "        continue\n",
    "    else:\n",
    "        amatrix.append([float(n) for n in line.strip().split()])\n",
    "        rowNumA += 1\n",
    "afile.close() # Disconnect the file\n",
    "#print(rowNumA) # for debugging activate\n",
    "#prMat(amatrix) # for debugging activate\n",
    "\n",
    "################################\n",
    "#   build lists for plotting   #\n",
    "################################\n",
    "\n",
    "time = []\n",
    "acc_rain = []\n",
    "acc_flow = []\n",
    "for irow in range(rowNumA):\n",
    "    time.append(amatrix[irow][0])\n",
    "    acc_rain.append(amatrix[irow][1])\n",
    "    acc_flow.append(amatrix[irow][2])\n",
    "\n",
    "title = \"1-minute Precipitation and Runoff for \" + filename\n",
    "xlabel = \"Elapsed time (minutes)\"\n",
    "ylabel = \"Accumulated Depth (watershed inches)\"\n",
    "legend1 = \"Accumulated Runoff\"\n",
    "legend2 = \"Accumulated Precipitation\"\n",
    "#Plot2Lines(time,acc_flow,time,acc_rain,title,xlabel,ylabel,legend1,legend2);\n",
    "\n",
    "# cumulative/incremental functions (old R code)\n",
    "\n",
    "\n",
    "\n",
    "# cumulative to incremental\n",
    "def disaggregate(x,y):\n",
    "    ''' \n",
    "    x and y are equal length lists\n",
    "    \n",
    "    returns a new list containing the incremental changes along x-axis\n",
    "    '''\n",
    "    if len(x) != len(y):\n",
    "        raise ValueError(\"lists are different length in disaggregate\")\n",
    "    n=len(x) # length of vectors\n",
    "    dfdx=[0 for i in range(n)]; # dfdx starts as list of zeros\n",
    "    for i in range(1,n):\n",
    "        dfdx[i] = (y[i] - y[i-1])/(x[i]- x[i-1])  \n",
    "    return dfdx\n",
    "\n",
    "# incremental to cumulative\n",
    "def aggregate(vector1,vector2):\n",
    "    n=len(vector1)\n",
    "    # fill vector2 with zeros\n",
    "    vector2 = [0 for i in range(n)]\n",
    "    vector2[0] = vector1[0]+0.0\n",
    "    for i in range(1,n):\n",
    "        vector2[i] = vector2[i-1] + vector1[i]\n",
    "    return vector2\n",
    "\n",
    "################################\n",
    "#  Leinhard Hydrograph Kernel  #\n",
    "################################\n",
    "def kernelfn(tbar,time,scale=2,shape=3,beta=2):\n",
    "    ''' \n",
    "        kernel function for a unit hydrograph - uses a gamma-type hydrograph\n",
    "\n",
    "          scale: a scaling parameter, should be 2, but left adjustable for grins\n",
    "          shape: Nash's reservoir number\n",
    "           tbar: Characteristic time, lag time in NRCS, time-to-peak, \n",
    "                 and time-of-concentration are all similar concepts.\n",
    "           beta: Exponent controling decay rate in exponential part of function; \n",
    "                 Should be a 2 or 3 for typical watersheds, but left adjusible for \n",
    "                 ornery cases.\n",
    "    '''\n",
    "    import math\n",
    "    term1 = (scale/tbar)/math.gamma(shape)\n",
    "    term2 = (time)/tbar\n",
    "    term3 = term2**(2*shape-1)\n",
    "    term4 = math.exp(-1*term2**beta)\n",
    "    kernelfn = term1*term3*term4\n",
    "    return kernelfn\n",
    "#####################################\n",
    "# CN loss model on cumulative lists #\n",
    "#####################################\n",
    "def xsrain(cumP,CN):\n",
    "    S = (1000/CN)-10.0\n",
    "    Ia = 0.2*S\n",
    "    if cumP >= Ia:\n",
    "        xsrain=S*(cumP-Ia)/(cumP-Ia+S)\n",
    "    else:\n",
    "        xsrain=0.0\n",
    "    return xsrain  \n",
    "##################\n",
    "# Apply CN model #\n",
    "##################\n",
    "#CN = 75\n",
    "excess_p = [0 for i in range(len(acc_rain))]\n",
    "for i in range(len(acc_rain)):\n",
    "    excess_p[i] = xsrain(acc_rain[i],CN) # p_model should be in cumulative space\n",
    "# Convert into rates for unitgraph analysis\n",
    "#excess_r = []\n",
    "#excess_r = disaggregate(t_model,excess_p)\n",
    "# compute incremental values\n",
    "incremental_rain = disaggregate(time,acc_rain)\n",
    "incremental_flow = disaggregate(time,acc_flow)\n",
    "incremental_xs   = disaggregate(time,excess_p)\n",
    "\n",
    "# Debugging Section\n",
    "# plot the data\n",
    "#Plot2Stairs(time,incremental_flow,time,incremental_rain,title,xlabel,ylabel,legend1,legend2);\n",
    "\n",
    "\n",
    "# now build Leinhard model(s)\n",
    "#F = 0.3021 # Use F value from DTRM model   Activate for proportional loss model\n",
    "# Excess rain\n",
    "#xs_rain = [0 for i in range(len(incremental_rain))]\n",
    "#for irow in range(len(incremental_rain)):\n",
    "#    xs_rain[irow]=incremental_rain[irow]*F\n",
    "    \n",
    "# now build Leinhard model(s)\n",
    "#F = 1.0  # \n",
    "# Excess rain\n",
    "xs_rain = [0 for i in range(len(incremental_xs))]\n",
    "for irow in range(len(incremental_xs)):\n",
    "#    xs_rain[irow]=incremental_xs[irow] # use this for CN model\n",
    "    xs_rain[irow]=incremental_rain[irow]*F # use this for F model\n",
    "    \n",
    "# Debugging Section\n",
    "#Plot2Stairs(time,incremental_flow,time,xs_rain,title,xlabel,ylabel,legend1,legend2);\n",
    "#print(\"Total Runoff : \",sum(incremental_flow))\n",
    "#print(\"Total Excess : \",sum(xs_rain))\n",
    "\n",
    "\n",
    "# discrete convolution function\n",
    "def convolve(duration, excitation, kernel):\n",
    "    response = [0 for i in range(duration)] # populate response vector with zeros\n",
    "  # response = direct runoff hydrograph (unscaled)\n",
    "  # excitation = input rate in length per time\n",
    "  # kernel = unit response\n",
    "    for i in range(duration):\n",
    "        for j in range(i,duration-1):\n",
    "            response[j]=excitation[i]*kernel[(j-i)+1]+response[j]\n",
    "    return(response)\n",
    "#def convolve(N1,excitation,kernel):\n",
    "# N1 is length of kernel list (already populated)\n",
    "# excitation is list of inputs (aka rainfall)\n",
    "# kernel is list of unit responses\n",
    "# response is convolved response\n",
    " #   response = [0.0 for i in range(N1)] # populate response vector with zeros\n",
    "  #  for i in range(1,N1):\n",
    "   #     for j in range(i,N1):\n",
    "    #        response[j] = excitation[i]*kernel[(j-i)]+response[j]\n",
    "   # return response\n",
    "\n",
    "# now build the runoff hydrograph\n",
    "N1 = len(xs_rain)\n",
    "kernel = []\n",
    "### parameters from DTRM analysis\n",
    "#scale = 2 # a scale constant - has units of rate\n",
    "#shape = 2.435991875 # Use N value from DTRM analysis spreadsheet\n",
    "#tbar = 23.41494069 # Use t_rms value from DTRM analysis spreadsheet\n",
    "#beta = 2 # Use beta value (1 or 2) from DTRM analysis spreadsheet\n",
    "# the actual UH kernel\n",
    "for i in range(N1):\n",
    "    kernel.append(kernelfn(0.6*tbar,time[i],scale,shape,beta))\n",
    "# the convolution\n",
    "response = convolve(N1,xs_rain,kernel)\n",
    "\n",
    "#####################################\n",
    "# Plot Results for Particular Storm #\n",
    "#####################################\n",
    "\n",
    "# Incremental Representation\n",
    "legend1 = 'Observed Hydrograph'\n",
    "legend2 = 'DTRM Fitted Hydrograph'\n",
    "ptitle = \"Fitted Hydrograph\" + \\\n",
    "\"\\n Volume Error Ratio (observed/model) \" \\\n",
    "+ repr(round(sum(incremental_flow)/sum(response),3))\\\n",
    "+ \"\\n   Peak Error Ratio (observed/model) \" \\\n",
    "+ repr(round(max(incremental_flow)/max(response),3)) \\\n",
    "+ \"\\n Kernel Integral : \" + repr(round(sum(kernel)))\n",
    "ylabel = 'Incremental Rate (inches/minute)'\n",
    "#Plot2Stairs(time,incremental_flow,time,response,ptitle,xlabel,ylabel,legend1,legend2);\n",
    "\n",
    "# Cumulative Representation\n",
    "legend2 = 'DTRM Fitted Accumulated Hydrograph'\n",
    "legend1 = 'Observed Accumulated Hydrograph'\n",
    "ptitle = \"\\n 1-minute Precipitation and Runoff for \" + filename + \"\\n\"\\\n",
    "\"\\n Volume Error Ratio (observed/model) \" \\\n",
    "+ repr(round(sum(incremental_flow)/sum(response),3))\\\n",
    "+ \"\\n   Peak Error Ratio (observed/model) \" \\\n",
    "+ repr(round(max(incremental_flow)/max(response),3)) \\\n",
    "+ \"\\n\\n F = \" + repr(round(F,4)) + \"\\n\"\\\n",
    "+ \"t_rms = \" + repr(round(tbar,4)) + \"\\n\"\\\n",
    "+ \"n = \" + repr(round(shape,4)) + \"\\n\"\\\n",
    "+ \"beta = \" + repr(round(beta,4)) + \"\\n\"\n",
    "ylabel = \"Accumulated Depth (watershed inches)\"\n",
    "accResponse = [0 for i in range(len(response))]\n",
    "accResponse = aggregate(response,accResponse)\n",
    "#Plot2Stairs(time,incremental_rain,time,incremental_xs,ptitle,xlabel,ylabel,legend1,legend2);\n",
    "\n",
    "# Debugging\n",
    "legend1 = 'Observed Accumulated Hydrograph'\n",
    "legend2 = 'DTRM Fitted Accumulated Hydrograph'\n",
    "legend3 = 'Input Accumulated Hyetograph'\n",
    "ylabel = \"Accumulated Depth (watershed inches)\"\n",
    "savefile = filename + \".cum.png\"\n",
    "Plot3Stairs(time,acc_flow,time,accResponse,time,acc_rain,ptitle,xlabel,ylabel,legend1,legend2,legend3,savefile);\n",
    "\n",
    "# Incremental Representation\n",
    "legend1 = 'Observed Incremental Hydrograph'\n",
    "legend2 = 'DTRM Fitted Incremental Hydrograph'\n",
    "legend3 = 'Input Hyetograph'\n",
    "ylabel = 'Incremental Rate (inches/minute)'\n",
    "savefile = filename + \".inc.png\"\n",
    "#Plot3Stairs(time,incremental_flow,time,response,time,incremental_rain,ptitle,xlabel,ylabel,legend1,legend2,legend3,savefile);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
