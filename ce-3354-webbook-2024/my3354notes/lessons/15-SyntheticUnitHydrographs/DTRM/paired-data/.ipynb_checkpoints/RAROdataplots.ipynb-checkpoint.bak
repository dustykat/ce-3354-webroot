{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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tsZ599xzDxHBW2+91YgR1U/Hjh2ZNGlSrctceOGFDS73xhtvrPY8VTd9wIABvPDCC/Uu+9xzz+WSSy5pcEylUtu5lyRJkqTGYLKhDikl9t9/f/bdd1/Gjh3LO++8w4wZM/j1r39dsm3OnTu3ZGUDDB8+nO23357hw4eXdDulsijJhnJY3PNY6utAkiRJkkrFZEMd/vnPf9K6dWuOPPJIAFq2bMmll17K9ddfzzfffAPARx99xIABA9hkk00477zzAPj666/53ve+R7du3dhqq60YOXIkAKNHj2bHHXekZ8+e7Lbbbnz66adA9jT95JNPplevXlxwwQVssMEGzJ8/v7Ks9dZbjzlz5vDee+8xePBgevbsSf/+/StrJ7z//vtsu+22dOnShTPPPLPG/ZkxYwbPPPMM1113HSNGjKicPm/ePE499VS22morunbtypVXXgnA888/z3bbbUe3bt3o06cP06dP/05tgD333JNRo0YB2VP10047jS233JJddtmF5557jgEDBrDhhhvyj3/8A/hubYLC9Qvtu+++9OzZky233JJrrrkGgDPOOIOZM2fSvXt3hgwZAsCtt95Knz596N69O8cccwzz5s0D4IYbbqBz58706dOHZ599tvYTXY3rr7+ek08+ufL7tddeyymnnALABRdcQOfOndl+++15++23K5cpPI+XX345TzzxBFtvvTVdunThqKOO4ttvvwXgwQcfZLPNNqNnz56ceOKJ7LnnnkBWS+Lwww+nX79+HH744YwfP57+/fvTo0cPevTowb///W8ARo0axeDBg/ne977HpptuyrHHHlt5vQD8+te/plu3bmyzzTZ8/vnnDd53SZIkSVocTSvZEFGaTy1ef/11evbsudC09u3bs/766/Puu+8C8Nxzz3HnnXfyyiuvcPvtt/PCCy/w8MMPs/baa/Pyyy/z2muvMXjwYObMmcMJJ5zAHXfcwejRoznqqKMWqiExe/ZsXnjhBc455xy6d+/Ov/71LwDuv/9+dtttN1q1asXRRx/NlVdeyejRo7nkkks47rjjADjppJP4yU9+wquvvspaa61V4/7ce++9DB48mM6dO7PKKqswevRoAK655hrGjx/PmDFjeOWVVxgyZAizZ8/mkEMO4fLLL+fll1/m8ccfZ/nll6/1eH399dfstNNOvP7667Rr144zzzyTxx57jLvvvpuzzz671nWruv766xk9ejQvvPACV1xxBZMnT+aiiy5i+eWXZ8yYMQwbNow333yTkSNH8uyzzzJmzBhatmzJsGHD+PTTTznnnHN49tlneeaZZ3jjjTdq3M7IkSPp3r175aeiCcXBBx/Mfffdx5w5c4AseXHUUUcxevRoRowYwZgxY3jwwQd5/vnnFyqv4jz+9Kc/ZejQoYwcOZJXX32VuXPn8te//pVZs2ZxzDHH8NBDDzF69GgmTpy40PpvvPEGjz/+OMOHD2f11Vfnscce48UXX2TkyJGceOKJlcuNHj2aK6+8kjfeeIP33nuPu+66q/IcbLPNNrz88svssMMOXHvttQ067pIkSZK0uJpWsmEJNWjQIFZZZRWWX3559t9/f5555hm6dOnCY489xi9+8QuefvppOnTowNtvv81rr73GoEGD6N69O+effz4ff/xxZTmHHHLIQuMVtSFGjBjBIYccwowZM/j3v//NQQcdVPkUv6JmxLPPPsthhx0GwOGHH15jrMOHD+fQQw8F4NBDD61sSvH4449zzDHHsMwyywCw8sor8/bbb7PWWmvRu3dvIEuyVMyvybLLLsvgwYMB6NKlCzvuuCOtWrWiS5cujB8/vt7HFOCKK66ofDr/0UcfMXbs2O8s88QTTzB69Gh69+5N9+7deeKJJxg3bhz/+9//GDBgAKutthrLLrvsQse2qkMOOYQxY8ZUfnr16gVktTR22mkn7r//ft566y3mzJlDly5dePrpp9lvv/1o06YN7du3Z++99/5OeQBvv/02nTp1onPnzgAcccQRPPXUU7z11ltsuOGGdOrUCaDyvFXYe++9K5M6c+bM4cc//jFdunThoIMOWihp0rNnTzbccENatmzJYYcdxjPPPANk56CipkTPnj0bfNwlSZIkaXHVfue4pEmp0Te5xRZbcMcddyw07auvvuLDDz9k44035t///vd3XgsYEXTu3JkXX3yRBx98kDPPPJOdd96Z/fbbjy233JL//Oc/1W5rhRVWqBzfe++9+dWvfsWUKVMYPXo0O+20E19//TUrrrgiY8aMqXb9ul5POGXKFP75z3/y6quvEhHMmzePiODiiy+ux5FYYJllllmoyv6sWbMqx1u1alUZR4sWLVhuueUqxyv6IKht/QqjRo3i8ccf5z//+Q9t2rRhwIAB1S6XUuKII47gd7/73ULT77nnngbtU01+9KMfceGFF7LZZptVNqWpS+F5XBSF61966aWsscYavPzyy8yfP5/WrVtXzqvuuoOFz0HLli3t+0GSJElSo7NmQx123nlnvvnmG26++WYg69vg5z//OUOHDqVNmzYAPPbYY0yZMoWZM2dyzz330K9fPyZMmECbNm34wQ9+wGmnncaLL77IpptuysSJEyuTDXPmzOH111+vdrtt27ald+/enHTSSey55560bNmS9u3b06lTJ26//XYgu9F++eWXAejXr19lHwzDhg2rtsw77riDww8/nA8++IDx48fz0Ucf0alTJ55++mkGDRrE3/72t8ob0ylTprDpppvy6aefVjYTmD59OnPnzqVjx46MGTOG+fPn89FHH/Hcc8816JjWZ/1p06ax0kor0aZNG9566y3++9//Vs5r1apVZdOGnXfemTvuuIMvvviiMu4PPviAvn378q9//YvJkyczZ86cymPWUH379uWjjz7itttuq6yBsMMOO3DPPfcwc+ZMpk+fzn333Vftuptuuinjx4+vbG5zyy23sOOOO7Lpppsybty4yhoHFTVYqjNt2jTWWmstWrRowS233FLZHwVkzSjef/995s+fz8iRI9l+++0XaR8lSZIkqdhMNtQhIrj77ru5/fbb2WSTTejcuTOtW7de6I0Iffr04YADDqBr164ccMAB9OrVi1dffbWy08LzzjuPM888k2WXXZY77riDX/ziF3Tr1o3u3btXdvhXnUMOOYRbb711oSYAw4YN47rrrqNbt25sueWW3HvvvQBcfvnl/PnPf6ZLly588skn1ZY3fPhw9ttvv4WmHXDAAQwfPpwf/ehHrL/++nTt2pVu3bpx2223seyyyzJy5EhOOOEEunXrxqBBg5g1axb9+vWjU6dObLHFFpx44on06NGjQce0PusPHjyYuXPnsvnmm3PGGWewzTbbVM47+uij6dq1K0OGDGGLLbbg/PPPZ9ddd6Vr164MGjSITz/9lLXWWotzzz2Xbbfdln79+rH55ps3KMZCBx98MP369WOllVYCoEePHhxyyCF069aN3XffvbKZSVWtW7fmhhtu4KCDDqJLly60aNGCY489luWXX56//OUvlR19tmvXjg4dOlRbxnHHHcdNN91Et27deOuttxaq9dCjRw+OP/54Nt98czp16vSdcytJkiRJ5RKpDE0TatKrV69U0TlfhTfffHOxbhRLbfr06bRr167cYaiE9txzT0455RR23nnnopU5Y8YM2rZtS0qJn/70p2yyySaVb7qoj1GjRnHRRRfx8MMPFy2muizpP4tqHKNGjWLAgAHlDkNLIa89lYvXnsrB607lUtu1FxGjU0q96luWNRukGkydOpXOnTuz/PLLFzXRANlrNLt3786WW27JtGnTOOaYY4paviRJkiSVU9PqIFJqRCuuuCLvvPNOSco+5ZRTGlSToaoBAwZ855WskiRJkrSksGaDJEmSJEkqKpMNkiRJkiSpqEw2SJIkSZKkojLZIEmSJEmSispkQz20bNmy8s0B3bp1449//CPz58/nkUceoV+/fnTv3p22bduy6aab0r17d374wx8yatQoOnToQPfu3dlss8049dRTK8u78cYbiQgef/zxymn33HMPEcEdd9zxne0PHTqUTp060b17d7p3784VV1zB2WefXbn+ZZddxjfffFO5/IUXXtjgfbzxxhs5/vjja5y/7777ss022zS43FIbNWoUe+65Z63LjBkzhgcffLDBZQ8YMICqr2Ktbvr48ePZaqutGlR2x44dmTRpUoNjKoW6zr0kSZIkNZRvo6iH5ZdfnjFjxgDwxRdf8P3vf5+vvvqK8847j+2224527doxYMAALrnkEnr1yl47OmrUKPr378/999/PzJkz2Xrrrdlvv/3o168fAF26dGHEiBHssssuAAwfPpxu3brVGMPFF1/MgQceWO28yy67jB/84Ae0adMGyJINv/rVr4q1+0ydOpXRo0fTtm1bxo0bx4Ybbli0shvDmDFjeOGFF9hjjz3KHUqtUkqklGjRYtFzgPPmzaNly5ZFjEqSJEmSGs6aDQ20+uqrc80113DVVVeRUqrXOssvvzzdu3fnk08+qZzWv39/nnvuOebMmcOMGTN499136d69e73jGDp0KHfccQdXXHEFEyZMYODAgQwcOJAzzjiDmTNn0r17d4YMGQLArbfeSp8+fejevTvHHHMM8+bNA+CGG26gc+fO9OnTh2effbbGbd11113stddeHHrooYwYMaJy+rvvvssuu+xCt27d6NGjB++99x4Av//97+nSpQvdunXjjDPOABauDTBp0iQ6duwIZE/V9913XwYNGkTHjh256qqr+NOf/sTWW2/NNttsw5QpU2pdv9Bzzz3Htttuy9Zbb812223H22+/zezZszn77LMZOXIk3bt3Z+TIkXz99dccddRR9OnTh6233pp7770XgJkzZ3LooYey+eabs99++zFz5sx6n48KO+ywQ2ViCmD77bfn5ZdfZvLkyey6665sueWW/OhHP6q8dsaPH8+mm27KD3/4Q7baais++ugjTjvtNLbaaiu6dOnCyJEjAZg/fz7HHXccm222GYMGDWKPPfbgnnvuAbJaEr/4xS/o0aMHt99+O9deey29e/emW7duHHDAAZW1XoYOHcqxxx5Lr1696Ny5M/fff39lnBMmTGDw4MFssskmnH766Q3eb0mSJEkq1LRqNkSJyq1fzqDShhtuyLx58/jiiy8qaxPU5ssvv2Ts2LHssMMOldMigl122YVHHnmEadOmsffee/P+++/XWMZpp53G+eefD8Att9xSOf3EE0/kT3/6E08++SSrrroqAFdddVXlDe+bb77JyJEjefbZZ2nVqhXHHXccw4YNY9CgQZxzzjmMHj2aDh06MHDgQLbeeutqtz18+HDOPvts1lhjDQ444IDKWhNDhgzhjDPOYL/99mPWrFnMnz+fhx56iHvvvZf//e9/tGnTpjJZUJvXXnuNl156iVmzZrHxxhvz+9//npdeeolTTjmFm2++mZNPPrnOMgA222wznn76aZZZZhkef/xxfvWrX3HnnXfym9/8hhdeeIGrrroKgF/96lfstNNOXH/99UydOpU+ffqwyy678Le//Y02bdrw5ptv8sorr9CjR48atzVkyBCWX355AGbPnl1ZG+H//u//uPHGG7nssst45513mDVrFt26dePEE09k++235+yzz+aBBx7guuuuqyxr7Nix3HTTTWyzzTbceeedjBkzhpdffplJkybRu3dvdthhB5599lnGjx/PG2+8wRdffMHmm2/OYYcdVlnGKquswosvvgjA5MmT+fGPfwzAmWeeyXXXXccJJ5wAZMmN5557jvfee4+BAwfy7rvvAlntj5deeonllluOTTfdlBNOOIH11luvXsddkiRJkqpqWsmGJubpp5+mW7dujB07lpNPPpk111xzofmHHnooV1xxBdOmTeOPf/xjrX0t1NaMojZPPPEEo0ePpnfv3kD29H711Vfnf//7HwMGDGC11VYD4JBDDuGdd975zvqff/45Y8eOZfvttyciaNWqFa+99hobbLABn3zyCfvttx8ArVu3BuDxxx/nyCOPrEzCrLzyynXGOHDgQNq1a0e7du3o0KEDe+21F5A1NXnllVfqva/Tpk3jiCOOYOzYsUQEc+bMqXa5Rx99lH/84x9ccsklAMyaNYsPP/yQp556ihNPPBGArl270rVr1xq3NWzYsMomM+PHj6/sN+Kggw7it7/9LRdffDHXX389Q4cOBeCpp57irrvuAuB73/seK620UmVZG2ywQWV/GM888wyHHXYYLVu2ZI011mDHHXfk+eef55lnnuGggw6iRYsWrLnmmgwcOHCheA455JDK8ddee40zzzyTqVOnMmPGDHbbbbfKeQcffDAtWrRgk002YcMNN+Stt94CYOedd6ZDhw4AbLHFFnzwwQcmGySpxD79FC69FO69F1ZaCepZYbJai7NuscpYEmIoRhlV158xoydt2zZuDMUowxiKV0Y5Yvjmmz4UPtNcEo5DMcpYEmIoRhnFiOGvf4XBgxe/nCVZ00o2FOGkFsO4ceNo2bIlq6++OjNmzKhxuYo+G95//3222WYbDj744IWaSvTp04dXX32VNm3a0Llz55LEmlLiiCOO4He/+91C0yuq4Nfl73//O19++SWdOnUC4KuvvmL48OGVzSPqa5lllmH+/PlAdnNfaLnllqscb9GiReX3Fi1aMHfu3DrXr3DWWWcxcOBA7r77bsaPH8+AAQOqXS6lxJ133smmm27aoH2ojzZt2jBo0CDuvfde/v73vzN69Og611lhhRUWe7uFZQwdOpR77rmHbt26ceONNzJq1KjKeRELVw+q+F54Dlq2bFl53CVJxTN/Ptx9d5ZgqKX1opY47codgJZKddeeVtNW0L9/s9W0kg1LgIkTJ3Lsscdy/PHHf+fGrSadOnXijDPO4Pe//z3Dhw9faN5FF11UWStgUbVr147p06dXNqNo1aoVc+bMoVWrVuy8887ss88+nHLKKay++upMmTKF6dOn07dvX0466SQmT55M+/btuf3226vtoHL48OE8/PDDbLvttgC8//777LLLLlxwwQWsu+663HPPPey77758++23zJs3j0GDBvGb3/yGIUOGVDajWHnllenYsSOjR4+mT58+1b5xoy71WX/atGmss846QNYXRNXjU2G33Xbjyiuv5MorryQieOmll9h6663ZYYcduO2229hpp5147bXXGlSrotCPfvQj9tprL/r3719Zg6Gi7DPPPJOHHnqIL7/8stp1+/fvz9/+9jeOOOIIpkyZwlNPPcXFF1/Mt99+y0033cQRRxzBxIkTGTVqVGWtkqqmT5/OWmutxZw5cxg2bFjlMQG4/fbbOeKII3j//fcZN24cm266KS+99NIi7ackqW7vvQcXXww33ACzZ1e/zE47weGHw+abL9626vlvSUnLWBJiKEYZheu/8MILlbUZGzOGYpRhDMUro7FjeO655+jTp09ZYyhVGUtCDMUoY3HXX331xVu/KTDZUA8VHS7OmTOHZZZZhsMPP5yf/exnDSrj2GOP5ZJLLmH8+PELTd99990XO76jjz6awYMHs/baa/Pkk09y9NFH07VrV3r06MGwYcM4//zz2XXXXZk/fz6tWrXiz3/+M9tssw3nnnsu2267LSuuuGK1nVOOHz+eDz74YKFXXnbq1IkOHTrwv//9j1tuuYVjjjmGs88+m1atWnH77bczePBgxowZQ69evVh22WXZY489uPDCCzn11FM5+OCDueaaa/je977X4H2sz/qnn346RxxxBOeff/5CywwcOJCLLrqI7t2788tf/pKzzjqLk08+ma5duzJ//nw6derE/fffz09+8hOOPPJINt98czbffHN69uzZ4DgBevbsSfv27TnyyCMrp51zzjkcdthhbLnllmy33Xasv/761a6733778Z///Idu3boREfzhD39gzTXX5IADDuCJJ55giy22YL311qNHjx60b9++2jJ++9vf0rdvX1ZbbTX69u27UKJl/fXXp0+fPnz11VdcffXVi53okiQt7NtvYdgwuOwyePXV6pdZaSU47jg46STIWzNqCTZt2gxq6NZKKpnPPvuGzTYrdxTS4on6vlGhMfTq1StVvHGgwptvvsnmi5vqL6Hp06fTrp3V67TAhAkTGDBgAG+99dZivcayqhkzZtC2bVsmT55Mnz59eOSRR9h4443rvf7QoUPZc889F6nvD1jyfxbVOEaNGlVjEyWplJbka++VV+Cii6BK5cWF7L03/OxnsMMOxXkip8azJF97ar687lQutV17ETE6pVTvql7WbJCK6Oabb+bXv/41f/rTn4qaaADYc889mTp1KrNnz+ass85ijTXWKGr5kqT6mzUrSxw8/3z189dbD044AX7yExrcuaAkSc2ByQapiH74wx/ywx/+sCRlF3b0CCzUPKI+CvuxkCQtnvztxwv5/vfh5z+HWt6cLEnSUsNkgyRJUgOcd96C8fXXh3fegYKX+kiSJEw2SJIk1dsnn8C55y74Pn68fTBIklSd4jYqlyRJasbWXXfB+CefmGiQJKkmJhskSZLqoXfvBePnnQdrr12+WCRJWtKZbKiHtiXoRnr8+PHcdttttS5z2WWX0bp1a6ZNm1b07S+uuo7J1KlT+ctf/tLgcs8991wuueSSek3v2LEjkyZNavA2FjW2Yrrxxhs5/vjjyxqDJKn+nnwSCt/OffbZ5YtFkqSmwGRDmdQn2TB8+HB69+7NXXfd1UhRFc+ScENfk2LHNm/evKKVJUla8syfDzvttOD7t9+WLxZJkpoKkw0NMGrUKAYMGMCBBx7IZpttxpAhQ0gpAdlT9tNPP50uXbrQp08f3n33XQCGDh3KHXfcUVlGRY2AM844g6effpru3btz6aWXfmdb7733HjNmzOD8889n+PDhldNnzJjBkUceSZcuXejatSt33nknAA8//DA9evSgW7du7LzzzsB3awNstdVWjB8/nvHjx7PZZpsxdOhQOnfuzJAhQ3j88cfp168fm2yyCc8991yt6xeaMWMGO++8Mz169KBLly7ce++9lfv33nvv0b17d0477TQALr74Ynr37k3Xrl0555xzKsu44IIL6Ny5M9tvvz1vv/12Q04JAGeffTaXXXZZ5fdf//rXXH755TVus2psKSVOO+00ttpqK7p06cLIkSMBmD9/PscddxybbbYZgwYNYo899qg8lx07duQXv/gFPXr04Pbbb+faa6+ld+/edOvWjQMOOIBvvvkGyM7/scceS69evejcuTP3339/ZZwTJkxg8ODBbLLJJpx++ukN3m9JUuM444wF4088AcsuW75YJElqKprU2yhK1QlTni+ol5deeonXX3+dtddem379+vHf//6XXXfdFYAOHTrw6quvcvPNN3PyyScvdGNZ1UUXXcQll1xS4zIjRozg0EMPpX///rz99tt8/vnnrLHGGvz2t7+t3A7Al19+ycSJE/nxj3/MU089RadOnZgyZUqd+/Huu+9y++23c/3119O7d29uu+02nnnmGf7xj39w4YUXcs8999TreLRu3Zq7776b9u3bM2nSJLbZZhv23ntvLrroIl577TXGjBkDwKOPPsrYsWN57rnnSCmx995789RTT7HCCiswYsQIxowZw9y5c+nRowc9e/asdluXXnopt956a+X3CRMmAHDUUUex//77c/LJJzN//nxGjBjBc889V+M2q8Z25513MmbMGF5++WUmTZpE79692WGHHXj22WcZP348b7zxBl988QWbb745Rx11VOX2V1llFV588UUAJk+ezI9//GMAzjzzTK677jpOOOEEIKvF8txzz/Hee+8xcODAykTUmDFjeOmll1huueXYdNNNOeGEE1hvvfXqddwlSY1j3jy4+OIF3wtrOEiSpJo1qWTDkqBPnz6sm3dF3b17dz744IPKeYcddljl8JRTTlms7QwfPpy7776bFi1acMABB3D77bdz/PHH8/jjjzNixIjK5VZaaSXuu+8+dthhBzp16gTAyiuvXGf5nTp1okuXLgBsueWW7LzzzkQEXbp0+U7thdqklPjVr37FU089RYsWLfjkk0/4/PPPv7Pco48+yqOPPsrWW28NZDUixo4dy/Tp09lvv/1o06YNAHvvvXeN2zrllFM49dRTK7937NixcrjKKqvw0ksv8fnnn7P11luzyiqr1LjN9ddff6Fyn3nmGQ477DBatmzJGmuswY477sjzzz/PM888w0EHHUSLFi1Yc801GThw4ELrHXLIIZXjr732GmeeeSZTp05lxowZ7LbbbpXzDj74YFq0aMEmm2zChhtuyFtvvQXAzjvvTIcOHQDYYost+OCDD0w2SNISJq+cB8D775cvDkmSmpomlWxoSA2EUlluueUqx1u2bLlQe/0oqHpRMb7MMsswf/58IKuWP3v27Dq38eqrrzJ27FgGDRoEwOzZs+nUqVODOxQs3DbArFmzqt2PFi1aVH5v0aIFc+fOrXP9CsOGDWPixImMHj2aVq1a0bFjx2qXSynxy1/+kmOOOWah6YXNHxbHj370I2688UY+++yzytoHNW2zIcmU2qywwgqV40OHDuWee+6hW7du3HjjjYwaNapyXlSpklPxveq1VHHcJUlLhnnzoLClY57jliRJ9WCfDUVU0dZ/5MiRbLvttkD21H306NEA/OMf/2DOnDkAtGvXjunTp1dbzvDhwzn33HMr+1eYMGECEyZM4IMPPmDQoEH8+c9/rlz2yy+/ZJtttuGpp57i/fyRS0Uzio4dO1ZW83/xxRcr59dXfdafNm0aq6++Oq1ateLJJ5+srOlRdf922203rr/+embMmAHAJ598whdffMEOO+zAPffcw8yZM5k+fTr33Xdfg2KssN9++/Hwww/z/PPPV9YqqGmbVWPr378/I0eOZN68eUycOJGnnnqKPn360K9fP+68807mz5/P559/vlACoarp06ez1lprMWfOHIYNG7bQvNtvv5358+fz3nvvMW7cODbddNNF2kdJUuM6+ugF4x9+WL44JElqippUzYYl3ZdffknXrl1ZbrnlKjt1/PGPf8w+++xDt27dGDx4cOXT8K5du9KyZUu6devG0KFDF2p2MWLECB588MGFyt5vv/0YMWIEZ555Jj/96U/ZaqutaNmyJeeccw77778/11xzDfvvvz/z589n9dVX57HHHuOAAw7g5ptvZsstt6Rv37507ty5QftTn/WHDBnCXnvtRZcuXejVqxebbbYZkPVn0K9fP7baait23313Lr74Yt58883KJEzbtm259dZb6dGjB4cccgjdunVj9dVXp3fhS8wbYNlll2XgwIGsuOKKtGzZEoBdd9212m1utNFGC8X2hz/8gf/85z9069aNiOAPf/gDa665JgcccABPPPEEW2yxBeuttx49evSobPZQ1W9/+1v69u3LaqutRt++fRdKZqy//vr06dOHr776iquvvprWrVsv0j5KkhrP3Llw/fULvtvKTZKkhom0JLRNyPXq1Su9UPgSa+DNN99k8803L1NEdZs+fTrt2rWjY8eOvPDCC6y66qrlDmmpNH/+/Mo3Q2yyySZFK3fGjBm0bduWyZMn06dPH5599lnWXHPNeq8/dOhQ9txzTw488MCixVSh4tprLEv6z6IaR8VbeaTG1tjX3kEHQcXLpD74AKp096OliL/3VA5edyqX2q69iBidUupV37Ks2aAm74033mDPPfdkv/32K2qiAWDPPfdk6tSpzJ49m7POOqtBiQZJUtM0d+6CREPr1iYaJElaFCYbiqRYnQ6q4bbYYgvGjRtXkrJr66ehPm688caixCFJajz77bdgfOzY8sUhSVJT1iQ6iFySmnpISyN/BiUtTe6/Pxuuuirkb7uWJEkNtMQnG1q3bs3kyZO92ZHKJKXE5MmT7dhS0lLhlVcWjD/1VPnikCSpqVvim1Gsu+66fPzxx0ycOLHcoVRr1qxZ3oSpLBrz2mvdujXr+nhP0lLgrLMWjNsnriRJi26JTza0atWKTp06lTuMGo0aNYqt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\n",
      "text/plain": [
       "<Figure size 1296x864 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Script reads RARO files and plots hydrographs\n",
    "# Data from DTRM analysis\n",
    "F = 0.3021 # Use F value from DTRM model\n",
    "CN = 85.5 # Use value from GIS\n",
    "scale = 2 # a scale constant - has units of rate\n",
    "shape = 4.799 # Use N value from DTRM analysis spreadsheet\n",
    "tbar = 106.765 # Use t_rms value from DTRM analysis spreadsheet\n",
    "beta = 2 # Use beta value (1 or 2) from DTRM analysis spreadsheet\n",
    "filename = 'rr1m_sta08055700_1968_0813.dat' # filename to read\n",
    "\n",
    "def prMat(amatrix):\n",
    "    # prints the contents of amatrix to stdio\n",
    "    howMany = len(amatrix) # get row count\n",
    "    lowWide = len(amatrix[0]) # get column count\n",
    "    for irow in range(howMany):\n",
    "        print(amatrix[irow])\n",
    "    return()\n",
    "\n",
    "# plotting functions from CE 5361\n",
    "import matplotlib.pyplot as plt  \n",
    "\n",
    "def Plot2Lines(list1,list2,list3,list4,ptitle,xlabel,ylabel,legend1,legend2):\n",
    "# Create a line chart of list2,list4 on y axis and list1,list3 on x axis\n",
    "    mydata = plt.figure(figsize = (18,6)) # build a drawing canvass from figure class; aspect ratio 4x3\n",
    "    plt.plot(list1, list2, c='red', marker='.',linewidth=2) # basic line plot\n",
    "    plt.plot(list3, list4, c='blue', marker='.',linewidth=1) # basic line plot\n",
    "    plt.xlabel(xlabel) # label the x-axis\n",
    "    plt.ylabel(ylabel) # label the y-axis, notice the LaTex markup\n",
    "    plt.legend([legend1,legend2]) # legend for each series\n",
    "    plt.title(ptitle) # make a plot title\n",
    "#    plt.xlim(100000, 120000)\n",
    "#    plt.ylim(2700, 2850)\n",
    "    plt.grid() # display a grid\n",
    "    plt.show() # display the plot\n",
    "    return()\n",
    "\n",
    "def Plot2Stairs(list1,list2,list3,list4,ptitle,xlabel,ylabel,legend1,legend2):\n",
    "# Create a line chart of list2,list4 on y axis and list1,list3 on x axis\n",
    "    mydata = plt.figure(figsize = (18,6)) # build a drawing canvass from figure class; aspect ratio 4x3\n",
    "    plt.step(list1, list2, c='red', marker='.',linewidth=2) # basic line plot\n",
    "    plt.step(list3, list4, c='blue', marker='.',linewidth=1) # basic line plot\n",
    "    plt.xlabel(xlabel) # label the x-axis\n",
    "    plt.ylabel(ylabel) # label the y-axis, notice the LaTex markup\n",
    "    plt.legend([legend1,legend2]) # legend for each series\n",
    "    plt.title(ptitle) # make a plot title\n",
    "#    plt.xlim(100000, 120000)\n",
    "#    plt.ylim(2700, 2850)\n",
    "    plt.grid() # display a grid\n",
    "    plt.show() # display the plot\n",
    "    return()\n",
    "\n",
    "def Plot3Stairs(list1,list2,list3,list4,list5,list6,ptitle,xlabel,ylabel,legend1,legend2,legend3,savefile):\n",
    "# Create a line chart of list2,list4 on y axis and list1,list3 on x axis\n",
    "    mydata = plt.figure(figsize = (18,12)) # build a drawing canvass from figure class; aspect ratio 4x3\n",
    "    plt.step(list1, list2, c='red', marker='',linewidth=2) # basic line plot\n",
    "    plt.step(list3, list4, c='magenta', marker='',linewidth=2) # basic line plot\n",
    "    plt.step(list5, list6, c='blue', marker='',linewidth=2) # basic line plot\n",
    "    plt.xlabel(xlabel) # label the x-axis\n",
    "    plt.ylabel(ylabel) # label the y-axis, notice the LaTex markup\n",
    "    plt.legend([legend1,legend2,legend3]) # legend for each series\n",
    "    plt.title(ptitle) # make a plot title\n",
    "#    plt.xlim(100000, 120000)\n",
    "#    plt.ylim(2700, 2850)\n",
    "    plt.grid() # display a grid\n",
    "    plt.savefig(savefile,bbox_inches='tight',pad_inches=0.5) # save to a file for documents\n",
    "    plt.show() # display the plot\n",
    "    return()\n",
    "\n",
    "################################\n",
    "#   connect and read file      #\n",
    "################################\n",
    "\n",
    "#filename = 'rr1m_sta08048530_1970_0425.dat' # filename to read\n",
    "afile = open(filename,\"r\")  # connect and read file \n",
    "amatrix = [] # null object to store read\n",
    "rowNumA = 0\n",
    "for line in afile:\n",
    "# if line contains comment statement then skip\n",
    "    if line[0]==\"#\":\n",
    "#        print('comment line')\n",
    "        continue\n",
    "    else:\n",
    "        amatrix.append([float(n) for n in line.strip().split()])\n",
    "        rowNumA += 1\n",
    "afile.close() # Disconnect the file\n",
    "#print(rowNumA) # for debugging activate\n",
    "#prMat(amatrix) # for debugging activate\n",
    "\n",
    "################################\n",
    "#   build lists for plotting   #\n",
    "################################\n",
    "\n",
    "time = []\n",
    "acc_rain = []\n",
    "acc_flow = []\n",
    "for irow in range(rowNumA):\n",
    "    time.append(amatrix[irow][0])\n",
    "    acc_rain.append(amatrix[irow][1])\n",
    "    acc_flow.append(amatrix[irow][2])\n",
    "\n",
    "title = \"1-minute Precipitation and Runoff for \" + filename\n",
    "xlabel = \"Elapsed time (minutes)\"\n",
    "ylabel = \"Accumulated Depth (watershed inches)\"\n",
    "legend1 = \"Accumulated Runoff\"\n",
    "legend2 = \"Accumulated Precipitation\"\n",
    "#Plot2Lines(time,acc_flow,time,acc_rain,title,xlabel,ylabel,legend1,legend2);\n",
    "\n",
    "# cumulative/incremental functions (old R code)\n",
    "\n",
    "\n",
    "\n",
    "# cumulative to incremental\n",
    "def disaggregate(x,y):\n",
    "    ''' \n",
    "    x and y are equal length lists\n",
    "    \n",
    "    returns a new list containing the incremental changes along x-axis\n",
    "    '''\n",
    "    if len(x) != len(y):\n",
    "        raise ValueError(\"lists are different length in disaggregate\")\n",
    "    n=len(x) # length of vectors\n",
    "    dfdx=[0 for i in range(n)]; # dfdx starts as list of zeros\n",
    "    for i in range(1,n):\n",
    "        dfdx[i] = (y[i] - y[i-1])/(x[i]- x[i-1])  \n",
    "    return dfdx\n",
    "\n",
    "# incremental to cumulative\n",
    "def aggregate(vector1,vector2):\n",
    "    n=len(vector1)\n",
    "    # fill vector2 with zeros\n",
    "    vector2 = [0 for i in range(n)]\n",
    "    vector2[0] = vector1[0]+0.0\n",
    "    for i in range(1,n):\n",
    "        vector2[i] = vector2[i-1] + vector1[i]\n",
    "    return vector2\n",
    "\n",
    "################################\n",
    "#  Leinhard Hydrograph Kernel  #\n",
    "################################\n",
    "def kernelfn(tbar,time,scale=2,shape=3,beta=2):\n",
    "    ''' \n",
    "        kernel function for a unit hydrograph - uses a gamma-type hydrograph\n",
    "\n",
    "          scale: a scaling parameter, should be 2, but left adjustable for grins\n",
    "          shape: Nash's reservoir number\n",
    "           tbar: Characteristic time, lag time in NRCS, time-to-peak, \n",
    "                 and time-of-concentration are all similar concepts.\n",
    "           beta: Exponent controling decay rate in exponential part of function; \n",
    "                 Should be a 2 or 3 for typical watersheds, but left adjusible for \n",
    "                 ornery cases.\n",
    "    '''\n",
    "    import math\n",
    "    term1 = (scale/tbar)/math.gamma(shape)\n",
    "    term2 = (time)/tbar\n",
    "    term3 = term2**(2*shape-1)\n",
    "    term4 = math.exp(-1*term2**beta)\n",
    "    kernelfn = term1*term3*term4\n",
    "    return kernelfn\n",
    "#####################################\n",
    "# CN loss model on cumulative lists #\n",
    "#####################################\n",
    "def xsrain(cumP,CN):\n",
    "    S = (1000/CN)-10.0\n",
    "    Ia = 0.2*S\n",
    "    if cumP >= Ia:\n",
    "        xsrain=S*(cumP-Ia)/(cumP-Ia+S)\n",
    "    else:\n",
    "        xsrain=0.0\n",
    "    return xsrain  \n",
    "##################\n",
    "# Apply CN model #\n",
    "##################\n",
    "#CN = 75\n",
    "excess_p = [0 for i in range(len(acc_rain))]\n",
    "for i in range(len(acc_rain)):\n",
    "    excess_p[i] = xsrain(acc_rain[i],CN) # p_model should be in cumulative space\n",
    "# Convert into rates for unitgraph analysis\n",
    "#excess_r = []\n",
    "#excess_r = disaggregate(t_model,excess_p)\n",
    "# compute incremental values\n",
    "incremental_rain = disaggregate(time,acc_rain)\n",
    "incremental_flow = disaggregate(time,acc_flow)\n",
    "incremental_xs   = disaggregate(time,excess_p)\n",
    "\n",
    "# Debugging Section\n",
    "# plot the data\n",
    "#Plot2Stairs(time,incremental_flow,time,incremental_rain,title,xlabel,ylabel,legend1,legend2);\n",
    "\n",
    "\n",
    "# now build Leinhard model(s)\n",
    "#F = 0.3021 # Use F value from DTRM model   Activate for proportional loss model\n",
    "# Excess rain\n",
    "#xs_rain = [0 for i in range(len(incremental_rain))]\n",
    "#for irow in range(len(incremental_rain)):\n",
    "#    xs_rain[irow]=incremental_rain[irow]*F\n",
    "    \n",
    "# now build Leinhard model(s)\n",
    "F = 1.0  # Activate for CN loss model\n",
    "# Excess rain\n",
    "xs_rain = [0 for i in range(len(incremental_xs))]\n",
    "for irow in range(len(incremental_xs)):\n",
    "    xs_rain[irow]=incremental_xs[irow]*F\n",
    "    \n",
    "# Debugging Section\n",
    "#Plot2Stairs(time,incremental_flow,time,xs_rain,title,xlabel,ylabel,legend1,legend2);\n",
    "#print(\"Total Runoff : \",sum(incremental_flow))\n",
    "#print(\"Total Excess : \",sum(xs_rain))\n",
    "\n",
    "\n",
    "# discrete convolution function\n",
    "def convolve(duration, excitation, kernel):\n",
    "    response = [0 for i in range(duration)] # populate response vector with zeros\n",
    "  # response = direct runoff hydrograph (unscaled)\n",
    "  # excitation = input rate in length per time\n",
    "  # kernel = unit response\n",
    "    for i in range(duration):\n",
    "        for j in range(i,duration-1):\n",
    "            response[j]=excitation[i]*kernel[(j-i)+1]+response[j]\n",
    "    return(response)\n",
    "#def convolve(N1,excitation,kernel):\n",
    "# N1 is length of kernel list (already populated)\n",
    "# excitation is list of inputs (aka rainfall)\n",
    "# kernel is list of unit responses\n",
    "# response is convolved response\n",
    " #   response = [0.0 for i in range(N1)] # populate response vector with zeros\n",
    "  #  for i in range(1,N1):\n",
    "   #     for j in range(i,N1):\n",
    "    #        response[j] = excitation[i]*kernel[(j-i)]+response[j]\n",
    "   # return response\n",
    "\n",
    "# now build the runoff hydrograph\n",
    "N1 = len(xs_rain)\n",
    "kernel = []\n",
    "### parameters from DTRM analysis\n",
    "#scale = 2 # a scale constant - has units of rate\n",
    "#shape = 2.435991875 # Use N value from DTRM analysis spreadsheet\n",
    "#tbar = 23.41494069 # Use t_rms value from DTRM analysis spreadsheet\n",
    "#beta = 2 # Use beta value (1 or 2) from DTRM analysis spreadsheet\n",
    "# the actual UH kernel\n",
    "for i in range(N1):\n",
    "    kernel.append(kernelfn(0.6*tbar,time[i],scale,shape,beta))\n",
    "# the convolution\n",
    "response = convolve(N1,xs_rain,kernel)\n",
    "\n",
    "#####################################\n",
    "# Plot Results for Particular Storm #\n",
    "#####################################\n",
    "\n",
    "# Incremental Representation\n",
    "legend1 = 'Observed Hydrograph'\n",
    "legend2 = 'DTRM Fitted Hydrograph'\n",
    "ptitle = \"Fitted Hydrograph\" + \\\n",
    "\"\\n Volume Error Ratio (observed/model) \" \\\n",
    "+ repr(round(sum(incremental_flow)/sum(response),3))\\\n",
    "+ \"\\n   Peak Error Ratio (observed/model) \" \\\n",
    "+ repr(round(max(incremental_flow)/max(response),3)) \\\n",
    "+ \"\\n Kernel Integral : \" + repr(round(sum(kernel)))\n",
    "ylabel = 'Incremental Rate (inches/minute)'\n",
    "#Plot2Stairs(time,incremental_flow,time,response,ptitle,xlabel,ylabel,legend1,legend2);\n",
    "\n",
    "# Cumulative Representation\n",
    "legend2 = 'DTRM Fitted Accumulated Hydrograph'\n",
    "legend1 = 'Observed Accumulated Hydrograph'\n",
    "ptitle = \"\\n 1-minute Precipitation and Runoff for \" + filename + \"\\n\"\\\n",
    "\"\\n Volume Error Ratio (observed/model) \" \\\n",
    "+ repr(round(sum(incremental_flow)/sum(response),3))\\\n",
    "+ \"\\n   Peak Error Ratio (observed/model) \" \\\n",
    "+ repr(round(max(incremental_flow)/max(response),3)) \\\n",
    "+ \"\\n\\n F = \" + repr(round(F,4)) + \"\\n\"\\\n",
    "+ \"t_rms = \" + repr(round(tbar,4)) + \"\\n\"\\\n",
    "+ \"n = \" + repr(round(shape,4)) + \"\\n\"\\\n",
    "+ \"beta = \" + repr(round(beta,4)) + \"\\n\"\n",
    "ylabel = \"Accumulated Depth (watershed inches)\"\n",
    "accResponse = [0 for i in range(len(response))]\n",
    "accResponse = aggregate(response,accResponse)\n",
    "#Plot2Stairs(time,incremental_rain,time,incremental_xs,ptitle,xlabel,ylabel,legend1,legend2);\n",
    "\n",
    "# Debugging\n",
    "legend1 = 'Observed Accumulated Hydrograph'\n",
    "legend2 = 'DTRM Fitted Accumulated Hydrograph'\n",
    "legend3 = 'Input Accumulated Hyetograph'\n",
    "ylabel = \"Accumulated Depth (watershed inches)\"\n",
    "savefile = filename + \".cum.png\"\n",
    "Plot3Stairs(time,acc_flow,time,accResponse,time,acc_rain,ptitle,xlabel,ylabel,legend1,legend2,legend3,savefile);\n",
    "\n",
    "# Incremental Representation\n",
    "legend1 = 'Observed Incremental Hydrograph'\n",
    "legend2 = 'DTRM Fitted Incremental Hydrograph'\n",
    "legend3 = 'Input Hyetograph'\n",
    "ylabel = 'Incremental Rate (inches/minute)'\n",
    "savefile = filename + \".inc.png\"\n",
    "#Plot3Stairs(time,incremental_flow,time,response,time,incremental_rain,ptitle,xlabel,ylabel,legend1,legend2,legend3,savefile);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
